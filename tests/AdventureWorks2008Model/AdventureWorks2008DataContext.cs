//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;
using ReadTestsAdventureWorks2008.EntityClasses;
using ReadTestsAdventureWorks2008.TypedViewClasses;

namespace ReadTestsAdventureWorks2008
{
	/// <summary>Class which represents the DataContext for the project / group 'AdventureWorks2008'</summary>
	/// <remarks>Targets the catalog(s): 'AdventureWorks'</remarks>
	public partial class AdventureWorks2008DataContext : System.Data.Linq.DataContext
	{
		private static readonly System.Data.Linq.Mapping.MappingSource _mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		public AdventureWorks2008DataContext() : 
				base(ConfigurationManager.ConnectionStrings["AdventureWorksConnectionString.SQL Server (SqlClient)"].ConnectionString, _mappingSource)
		{
			OnCreated();
		}

		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		/// <param name="mappingSource">The mapping source.</param>
		public AdventureWorks2008DataContext(System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(ConfigurationManager.ConnectionStrings["AdventureWorksConnectionString.SQL Server (SqlClient)"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		public AdventureWorks2008DataContext(string connection) : 
				base(connection, _mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		public AdventureWorks2008DataContext(System.Data.IDbConnection connection) : 
				base(connection, _mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		/// <param name="mappingSource">The mapping source.</param>
		public AdventureWorks2008DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="AdventureWorks2008DataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		/// <param name="mappingSource">The mapping source.</param>
		public AdventureWorks2008DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Gets an open DbDataReader instance with the results of the query specified</summary>
		/// <param name="query">The query to execute</param>
		/// <returns>An open DbDataReader instance with the results of the query specified</returns>
		/// <remarks>The command behavior is set to CloseConnection.</remarks>
		public DbDataReader GetQueryAsDataReader(IQueryable query)
		{
			return SetupCommand(GetCommand(query), true).ExecuteReader(CommandBehavior.CloseConnection);
		}
		
		/// <summary>Calls the stored procedure '[dbo].[uspGetBillOfMaterials]' and fills the typedview(s): 'BillOfRightsResult'</summary>
		/// <param name="StartProductID">Parameter mapped onto the stored procedure parameter '@StartProductID'</param>
		/// <param name="CheckDate">Parameter mapped onto the stored procedure parameter '@CheckDate'</param>
		/// <returns>A single result object which contains the filled typedview 'BillOfRightsResult'</returns>
		public ISingleResult<BillOfRightsResultTypedViewRow> GetBillOfRightsResult(System.Int32 StartProductID, System.DateTime CheckDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodBase.GetCurrentMethod())), StartProductID, CheckDate);
			return (ISingleResult<BillOfRightsResultTypedViewRow>)(result.ReturnValue);
		}
		
		/// <summary>Gets the Address Table definition. Mapped on table 'AdventureWorks.Person.Address'.</summary>
		public System.Data.Linq.Table<Address> Addresses
		{
			get { return this.GetTable<Address>(); }
		}
		
		/// <summary>Gets the AddressType Table definition. Mapped on table 'AdventureWorks.Person.AddressType'.</summary>
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get { return this.GetTable<AddressType>(); }
		}
		
		/// <summary>Gets the AwbuildVersion Table definition. Mapped on table 'AdventureWorks.dbo.AWBuildVersion'.</summary>
		public System.Data.Linq.Table<AwbuildVersion> AwbuildVersions
		{
			get { return this.GetTable<AwbuildVersion>(); }
		}
		
		/// <summary>Gets the BillOfMaterial Table definition. Mapped on table 'AdventureWorks.Production.BillOfMaterials'.</summary>
		public System.Data.Linq.Table<BillOfMaterial> BillOfMaterials
		{
			get { return this.GetTable<BillOfMaterial>(); }
		}
		
		/// <summary>Gets the BusinessEntity Table definition. Mapped on table 'AdventureWorks.Person.BusinessEntity'.</summary>
		public System.Data.Linq.Table<BusinessEntity> BusinessEntities
		{
			get { return this.GetTable<BusinessEntity>(); }
		}
		
		/// <summary>Gets the BusinessEntityAddress Table definition. Mapped on table 'AdventureWorks.Person.BusinessEntityAddress'.</summary>
		public System.Data.Linq.Table<BusinessEntityAddress> BusinessEntityAddresses
		{
			get { return this.GetTable<BusinessEntityAddress>(); }
		}
		
		/// <summary>Gets the BusinessEntityContact Table definition. Mapped on table 'AdventureWorks.Person.BusinessEntityContact'.</summary>
		public System.Data.Linq.Table<BusinessEntityContact> BusinessEntityContacts
		{
			get { return this.GetTable<BusinessEntityContact>(); }
		}
		
		/// <summary>Gets the ContactType Table definition. Mapped on table 'AdventureWorks.Person.ContactType'.</summary>
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get { return this.GetTable<ContactType>(); }
		}
		
		/// <summary>Gets the CountryRegion Table definition. Mapped on table 'AdventureWorks.Person.CountryRegion'.</summary>
		public System.Data.Linq.Table<CountryRegion> CountryRegions
		{
			get { return this.GetTable<CountryRegion>(); }
		}
		
		/// <summary>Gets the CountryRegionCurrency Table definition. Mapped on table 'AdventureWorks.Sales.CountryRegionCurrency'.</summary>
		public System.Data.Linq.Table<CountryRegionCurrency> CountryRegionCurrencies
		{
			get { return this.GetTable<CountryRegionCurrency>(); }
		}
		
		/// <summary>Gets the CreditCard Table definition. Mapped on table 'AdventureWorks.Sales.CreditCard'.</summary>
		public System.Data.Linq.Table<CreditCard> CreditCards
		{
			get { return this.GetTable<CreditCard>(); }
		}
		
		/// <summary>Gets the Culture Table definition. Mapped on table 'AdventureWorks.Production.Culture'.</summary>
		public System.Data.Linq.Table<Culture> Cultures
		{
			get { return this.GetTable<Culture>(); }
		}
		
		/// <summary>Gets the Currency Table definition. Mapped on table 'AdventureWorks.Sales.Currency'.</summary>
		public System.Data.Linq.Table<Currency> Currencies
		{
			get { return this.GetTable<Currency>(); }
		}
		
		/// <summary>Gets the CurrencyRate Table definition. Mapped on table 'AdventureWorks.Sales.CurrencyRate'.</summary>
		public System.Data.Linq.Table<CurrencyRate> CurrencyRates
		{
			get { return this.GetTable<CurrencyRate>(); }
		}
		
		/// <summary>Gets the Customer Table definition. Mapped on table 'AdventureWorks.Sales.Customer'.</summary>
		public System.Data.Linq.Table<Customer> Customers
		{
			get { return this.GetTable<Customer>(); }
		}
		
		/// <summary>Gets the DatabaseLog Table definition. Mapped on table 'AdventureWorks.dbo.DatabaseLog'.</summary>
		public System.Data.Linq.Table<DatabaseLog> DatabaseLogs
		{
			get { return this.GetTable<DatabaseLog>(); }
		}
		
		/// <summary>Gets the Department Table definition. Mapped on table 'AdventureWorks.HumanResources.Department'.</summary>
		public System.Data.Linq.Table<Department> Departments
		{
			get { return this.GetTable<Department>(); }
		}
		
		/// <summary>Gets the Document Table definition. Mapped on table 'AdventureWorks.Production.Document'.</summary>
		public System.Data.Linq.Table<Document> Documents
		{
			get { return this.GetTable<Document>(); }
		}
		
		/// <summary>Gets the EmailAddress Table definition. Mapped on table 'AdventureWorks.Person.EmailAddress'.</summary>
		public System.Data.Linq.Table<EmailAddress> EmailAddresses
		{
			get { return this.GetTable<EmailAddress>(); }
		}
		
		/// <summary>Gets the Employee Table definition. Mapped on table 'AdventureWorks.HumanResources.Employee'.</summary>
		public System.Data.Linq.Table<Employee> Employees
		{
			get { return this.GetTable<Employee>(); }
		}
		
		/// <summary>Gets the EmployeeDepartmentHistory Table definition. Mapped on table 'AdventureWorks.HumanResources.EmployeeDepartmentHistory'.</summary>
		public System.Data.Linq.Table<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get { return this.GetTable<EmployeeDepartmentHistory>(); }
		}
		
		/// <summary>Gets the EmployeePayHistory Table definition. Mapped on table 'AdventureWorks.HumanResources.EmployeePayHistory'.</summary>
		public System.Data.Linq.Table<EmployeePayHistory> EmployeePayHistories
		{
			get { return this.GetTable<EmployeePayHistory>(); }
		}
		
		/// <summary>Gets the ErrorLog Table definition. Mapped on table 'AdventureWorks.dbo.ErrorLog'.</summary>
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get { return this.GetTable<ErrorLog>(); }
		}
		
		/// <summary>Gets the Illustration Table definition. Mapped on table 'AdventureWorks.Production.Illustration'.</summary>
		public System.Data.Linq.Table<Illustration> Illustrations
		{
			get { return this.GetTable<Illustration>(); }
		}
		
		/// <summary>Gets the JobCandidate Table definition. Mapped on table 'AdventureWorks.HumanResources.JobCandidate'.</summary>
		public System.Data.Linq.Table<JobCandidate> JobCandidates
		{
			get { return this.GetTable<JobCandidate>(); }
		}
		
		/// <summary>Gets the Location Table definition. Mapped on table 'AdventureWorks.Production.Location'.</summary>
		public System.Data.Linq.Table<Location> Locations
		{
			get { return this.GetTable<Location>(); }
		}
		
		/// <summary>Gets the Password Table definition. Mapped on table 'AdventureWorks.Person.Password'.</summary>
		public System.Data.Linq.Table<Password> Passwords
		{
			get { return this.GetTable<Password>(); }
		}
		
		/// <summary>Gets the Person Table definition. Mapped on table 'AdventureWorks.Person.Person'.</summary>
		public System.Data.Linq.Table<Person> People
		{
			get { return this.GetTable<Person>(); }
		}
		
		/// <summary>Gets the PersonCreditCard Table definition. Mapped on table 'AdventureWorks.Sales.PersonCreditCard'.</summary>
		public System.Data.Linq.Table<PersonCreditCard> PersonCreditCards
		{
			get { return this.GetTable<PersonCreditCard>(); }
		}
		
		/// <summary>Gets the PersonPhone Table definition. Mapped on table 'AdventureWorks.Person.PersonPhone'.</summary>
		public System.Data.Linq.Table<PersonPhone> PersonPhones
		{
			get { return this.GetTable<PersonPhone>(); }
		}
		
		/// <summary>Gets the PhoneNumberType Table definition. Mapped on table 'AdventureWorks.Person.PhoneNumberType'.</summary>
		public System.Data.Linq.Table<PhoneNumberType> PhoneNumberTypes
		{
			get { return this.GetTable<PhoneNumberType>(); }
		}
		
		/// <summary>Gets the Product Table definition. Mapped on table 'AdventureWorks.Production.Product'.</summary>
		public System.Data.Linq.Table<Product> Products
		{
			get { return this.GetTable<Product>(); }
		}
		
		/// <summary>Gets the ProductCategory Table definition. Mapped on table 'AdventureWorks.Production.ProductCategory'.</summary>
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get { return this.GetTable<ProductCategory>(); }
		}
		
		/// <summary>Gets the ProductCostHistory Table definition. Mapped on table 'AdventureWorks.Production.ProductCostHistory'.</summary>
		public System.Data.Linq.Table<ProductCostHistory> ProductCostHistories
		{
			get { return this.GetTable<ProductCostHistory>(); }
		}
		
		/// <summary>Gets the ProductDescription Table definition. Mapped on table 'AdventureWorks.Production.ProductDescription'.</summary>
		public System.Data.Linq.Table<ProductDescription> ProductDescriptions
		{
			get { return this.GetTable<ProductDescription>(); }
		}
		
		/// <summary>Gets the ProductDocument Table definition. Mapped on table 'AdventureWorks.Production.ProductDocument'.</summary>
		public System.Data.Linq.Table<ProductDocument> ProductDocuments
		{
			get { return this.GetTable<ProductDocument>(); }
		}
		
		/// <summary>Gets the ProductInventory Table definition. Mapped on table 'AdventureWorks.Production.ProductInventory'.</summary>
		public System.Data.Linq.Table<ProductInventory> ProductInventories
		{
			get { return this.GetTable<ProductInventory>(); }
		}
		
		/// <summary>Gets the ProductListPriceHistory Table definition. Mapped on table 'AdventureWorks.Production.ProductListPriceHistory'.</summary>
		public System.Data.Linq.Table<ProductListPriceHistory> ProductListPriceHistories
		{
			get { return this.GetTable<ProductListPriceHistory>(); }
		}
		
		/// <summary>Gets the ProductModel Table definition. Mapped on table 'AdventureWorks.Production.ProductModel'.</summary>
		public System.Data.Linq.Table<ProductModel> ProductModels
		{
			get { return this.GetTable<ProductModel>(); }
		}
		
		/// <summary>Gets the ProductModelIllustration Table definition. Mapped on table 'AdventureWorks.Production.ProductModelIllustration'.</summary>
		public System.Data.Linq.Table<ProductModelIllustration> ProductModelIllustrations
		{
			get { return this.GetTable<ProductModelIllustration>(); }
		}
		
		/// <summary>Gets the ProductModelProductDescriptionCulture Table definition. Mapped on table 'AdventureWorks.Production.ProductModelProductDescriptionCulture'.</summary>
		public System.Data.Linq.Table<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures
		{
			get { return this.GetTable<ProductModelProductDescriptionCulture>(); }
		}
		
		/// <summary>Gets the ProductPhoto Table definition. Mapped on table 'AdventureWorks.Production.ProductPhoto'.</summary>
		public System.Data.Linq.Table<ProductPhoto> ProductPhotos
		{
			get { return this.GetTable<ProductPhoto>(); }
		}
		
		/// <summary>Gets the ProductProductPhoto Table definition. Mapped on table 'AdventureWorks.Production.ProductProductPhoto'.</summary>
		public System.Data.Linq.Table<ProductProductPhoto> ProductProductPhotos
		{
			get { return this.GetTable<ProductProductPhoto>(); }
		}
		
		/// <summary>Gets the ProductReview Table definition. Mapped on table 'AdventureWorks.Production.ProductReview'.</summary>
		public System.Data.Linq.Table<ProductReview> ProductReviews
		{
			get { return this.GetTable<ProductReview>(); }
		}
		
		/// <summary>Gets the ProductSubcategory Table definition. Mapped on table 'AdventureWorks.Production.ProductSubcategory'.</summary>
		public System.Data.Linq.Table<ProductSubcategory> ProductSubcategories
		{
			get { return this.GetTable<ProductSubcategory>(); }
		}
		
		/// <summary>Gets the ProductVendor Table definition. Mapped on table 'AdventureWorks.Purchasing.ProductVendor'.</summary>
		public System.Data.Linq.Table<ProductVendor> ProductVendors
		{
			get { return this.GetTable<ProductVendor>(); }
		}
		
		/// <summary>Gets the PurchaseOrderDetail Table definition. Mapped on table 'AdventureWorks.Purchasing.PurchaseOrderDetail'.</summary>
		public System.Data.Linq.Table<PurchaseOrderDetail> PurchaseOrderDetails
		{
			get { return this.GetTable<PurchaseOrderDetail>(); }
		}
		
		/// <summary>Gets the PurchaseOrderHeader Table definition. Mapped on table 'AdventureWorks.Purchasing.PurchaseOrderHeader'.</summary>
		public System.Data.Linq.Table<PurchaseOrderHeader> PurchaseOrderHeaders
		{
			get { return this.GetTable<PurchaseOrderHeader>(); }
		}
		
		/// <summary>Gets the SalesOrderDetail Table definition. Mapped on table 'AdventureWorks.Sales.SalesOrderDetail'.</summary>
		public System.Data.Linq.Table<SalesOrderDetail> SalesOrderDetails
		{
			get { return this.GetTable<SalesOrderDetail>(); }
		}
		
		/// <summary>Gets the SalesOrderHeader Table definition. Mapped on table 'AdventureWorks.Sales.SalesOrderHeader'.</summary>
		public System.Data.Linq.Table<SalesOrderHeader> SalesOrderHeaders
		{
			get { return this.GetTable<SalesOrderHeader>(); }
		}
		
		/// <summary>Gets the SalesOrderHeaderSalesReason Table definition. Mapped on table 'AdventureWorks.Sales.SalesOrderHeaderSalesReason'.</summary>
		public System.Data.Linq.Table<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons
		{
			get { return this.GetTable<SalesOrderHeaderSalesReason>(); }
		}
		
		/// <summary>Gets the SalesPerson Table definition. Mapped on table 'AdventureWorks.Sales.SalesPerson'.</summary>
		public System.Data.Linq.Table<SalesPerson> SalesPeople
		{
			get { return this.GetTable<SalesPerson>(); }
		}
		
		/// <summary>Gets the SalesPersonQuotaHistory Table definition. Mapped on table 'AdventureWorks.Sales.SalesPersonQuotaHistory'.</summary>
		public System.Data.Linq.Table<SalesPersonQuotaHistory> SalesPersonQuotaHistories
		{
			get { return this.GetTable<SalesPersonQuotaHistory>(); }
		}
		
		/// <summary>Gets the SalesReason Table definition. Mapped on table 'AdventureWorks.Sales.SalesReason'.</summary>
		public System.Data.Linq.Table<SalesReason> SalesReasons
		{
			get { return this.GetTable<SalesReason>(); }
		}
		
		/// <summary>Gets the SalesTaxRate Table definition. Mapped on table 'AdventureWorks.Sales.SalesTaxRate'.</summary>
		public System.Data.Linq.Table<SalesTaxRate> SalesTaxRates
		{
			get { return this.GetTable<SalesTaxRate>(); }
		}
		
		/// <summary>Gets the SalesTerritory Table definition. Mapped on table 'AdventureWorks.Sales.SalesTerritory'.</summary>
		public System.Data.Linq.Table<SalesTerritory> SalesTerritories
		{
			get { return this.GetTable<SalesTerritory>(); }
		}
		
		/// <summary>Gets the SalesTerritoryHistory Table definition. Mapped on table 'AdventureWorks.Sales.SalesTerritoryHistory'.</summary>
		public System.Data.Linq.Table<SalesTerritoryHistory> SalesTerritoryHistories
		{
			get { return this.GetTable<SalesTerritoryHistory>(); }
		}
		
		/// <summary>Gets the ScrapReason Table definition. Mapped on table 'AdventureWorks.Production.ScrapReason'.</summary>
		public System.Data.Linq.Table<ScrapReason> ScrapReasons
		{
			get { return this.GetTable<ScrapReason>(); }
		}
		
		/// <summary>Gets the Shift Table definition. Mapped on table 'AdventureWorks.HumanResources.Shift'.</summary>
		public System.Data.Linq.Table<Shift> Shifts
		{
			get { return this.GetTable<Shift>(); }
		}
		
		/// <summary>Gets the ShipMethod Table definition. Mapped on table 'AdventureWorks.Purchasing.ShipMethod'.</summary>
		public System.Data.Linq.Table<ShipMethod> ShipMethods
		{
			get { return this.GetTable<ShipMethod>(); }
		}
		
		/// <summary>Gets the ShoppingCartItem Table definition. Mapped on table 'AdventureWorks.Sales.ShoppingCartItem'.</summary>
		public System.Data.Linq.Table<ShoppingCartItem> ShoppingCartItems
		{
			get { return this.GetTable<ShoppingCartItem>(); }
		}
		
		/// <summary>Gets the SpecialOffer Table definition. Mapped on table 'AdventureWorks.Sales.SpecialOffer'.</summary>
		public System.Data.Linq.Table<SpecialOffer> SpecialOffers
		{
			get { return this.GetTable<SpecialOffer>(); }
		}
		
		/// <summary>Gets the SpecialOfferProduct Table definition. Mapped on table 'AdventureWorks.Sales.SpecialOfferProduct'.</summary>
		public System.Data.Linq.Table<SpecialOfferProduct> SpecialOfferProducts
		{
			get { return this.GetTable<SpecialOfferProduct>(); }
		}
		
		/// <summary>Gets the StateProvince Table definition. Mapped on table 'AdventureWorks.Person.StateProvince'.</summary>
		public System.Data.Linq.Table<StateProvince> StateProvinces
		{
			get { return this.GetTable<StateProvince>(); }
		}
		
		/// <summary>Gets the Store Table definition. Mapped on table 'AdventureWorks.Sales.Store'.</summary>
		public System.Data.Linq.Table<Store> Stores
		{
			get { return this.GetTable<Store>(); }
		}
		
		/// <summary>Gets the TransactionHistory Table definition. Mapped on table 'AdventureWorks.Production.TransactionHistory'.</summary>
		public System.Data.Linq.Table<TransactionHistory> TransactionHistories
		{
			get { return this.GetTable<TransactionHistory>(); }
		}
		
		/// <summary>Gets the TransactionHistoryArchive Table definition. Mapped on table 'AdventureWorks.Production.TransactionHistoryArchive'.</summary>
		public System.Data.Linq.Table<TransactionHistoryArchive> TransactionHistoryArchives
		{
			get { return this.GetTable<TransactionHistoryArchive>(); }
		}
		
		/// <summary>Gets the UnitMeasure Table definition. Mapped on table 'AdventureWorks.Production.UnitMeasure'.</summary>
		public System.Data.Linq.Table<UnitMeasure> UnitMeasures
		{
			get { return this.GetTable<UnitMeasure>(); }
		}
		
		/// <summary>Gets the Vendor Table definition. Mapped on table 'AdventureWorks.Purchasing.Vendor'.</summary>
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get { return this.GetTable<Vendor>(); }
		}
		
		/// <summary>Gets the WorkOrder Table definition. Mapped on table 'AdventureWorks.Production.WorkOrder'.</summary>
		public System.Data.Linq.Table<WorkOrder> WorkOrders
		{
			get { return this.GetTable<WorkOrder>(); }
		}
		
		/// <summary>Gets the WorkOrderRouting Table definition. Mapped on table 'AdventureWorks.Production.WorkOrderRouting'.</summary>
		public System.Data.Linq.Table<WorkOrderRouting> WorkOrderRoutings
		{
			get { return this.GetTable<WorkOrderRouting>(); }
		}
		
		/// <summary>Calls the Table-valued-function '[dbo].[ufnGetContactInformation]' and returns instances of type 'UfnGetContactInformationResultTypedViewRow'</summary>
		/// <param name="personId">parameter of the TVF</param>
		public IQueryable<UfnGetContactInformationResultTypedViewRow> UfnGetContactInformation(System.Int32 personId)
		{
			return this.CreateMethodCallQuery<UfnGetContactInformationResultTypedViewRow>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), personId);
		}
		
		/// <summary>Sets up the command specified. It wires it to the current connection and transaction, sets command timeout and if requested, it also opens the command</summary>
		/// <param name="toSetup">The command to setup</param>
		/// <param name="openConnection">If set to true, the connection is also opened if it's not already open, otherwise it's left as-is</param>
		/// <returns>The passed in DbCommand</returns>
		private DbCommand SetupCommand(DbCommand toSetup, bool openConnection)
		{
			if(toSetup==null)
			{
				return toSetup;
			}
			toSetup.Connection = this.Connection;
			toSetup.Transaction = this.Transaction;
			toSetup.CommandTimeout = this.CommandTimeout;
			if((toSetup.Connection!=null) && openConnection && (toSetup.Connection.State!=ConnectionState.Open))
			{
				toSetup.Connection.Open();
			}
			return toSetup;
		}
				        
		/// <summary>Creates a new stored procedure call command and sets it up to make it ready to use.</summary>
		/// <param name="storedProcedureToCall">The stored procedure to call.</param>
		/// <returns>ready to use command</returns>
		private DbCommand CreateStoredProcCallCommand(string storedProcedureToCall)
		{
			var cmd = this.Connection.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = storedProcedureToCall;
			return SetupCommand(cmd, false);
		}
        
		/// <summary>Adds a new parameter created from the input specified to the command specified</summary>
		/// <param name="cmd">The command to add the new parameter to</param>
		/// <param name="parameterName">Name of the parameter.</param>
		/// <param name="type">The type.</param>
		/// <param name="length">The length.</param>
		/// <param name="direction">The direction.</param>
		/// <param name="value">The value for the parameter</param>
		private static void AddParameter(DbCommand cmd, string parameterName, SqlDbType type, int length, ParameterDirection direction, object value)
		{
			cmd.Parameters.Add(new SqlParameter(parameterName, type, length) { Direction = direction, Value = value });
		}

	}
}
