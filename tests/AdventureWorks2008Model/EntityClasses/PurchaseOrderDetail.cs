#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'PurchaseOrderDetail', mapped on table 'AdventureWorks.Purchasing.PurchaseOrderDetail'.</summary>
	public partial class PurchaseOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_dueDate;
		private System.Decimal	_lineTotal;
		private System.DateTime	_modifiedDate;
		private System.Int16	_orderQty;
		private System.Int32	_productId;
		private System.Int32	_purchaseOrderDetailId;
		private System.Int32	_purchaseOrderId;
		private System.Decimal	_receivedQty;
		private System.Decimal	_rejectedQty;
		private System.Decimal	_stockedQty;
		private System.Decimal	_unitPrice;
		private EntityRef <Product> _product;
		private EntityRef <PurchaseOrderHeader> _purchaseOrderHeader;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDueDateChanging(System.DateTime value);
		partial void OnDueDateChanged();
		partial void OnLineTotalChanging(System.Decimal value);
		partial void OnLineTotalChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnOrderQtyChanging(System.Int16 value);
		partial void OnOrderQtyChanged();
		partial void OnProductIdChanging(System.Int32 value);
		partial void OnProductIdChanged();
		partial void OnPurchaseOrderDetailIdChanging(System.Int32 value);
		partial void OnPurchaseOrderDetailIdChanged();
		partial void OnPurchaseOrderIdChanging(System.Int32 value);
		partial void OnPurchaseOrderIdChanged();
		partial void OnReceivedQtyChanging(System.Decimal value);
		partial void OnReceivedQtyChanged();
		partial void OnRejectedQtyChanging(System.Decimal value);
		partial void OnRejectedQtyChanged();
		partial void OnStockedQtyChanging(System.Decimal value);
		partial void OnStockedQtyChanged();
		partial void OnUnitPriceChanging(System.Decimal value);
		partial void OnUnitPriceChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="PurchaseOrderDetail"/> class.</summary>
		public PurchaseOrderDetail()
		{
			_product = default(EntityRef<Product>);
			_purchaseOrderHeader = default(EntityRef<PurchaseOrderHeader>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the DueDate field. Mapped on target field 'DueDate'. </summary>
		public System.DateTime DueDate
		{
			get	{ return _dueDate; }
			set
			{
				if((_dueDate != value))
				{
					OnDueDateChanging(value);
					SendPropertyChanging("DueDate");
					_dueDate = value;
					SendPropertyChanged("DueDate");
					OnDueDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the LineTotal field. Mapped on target field 'LineTotal'. </summary>
		public System.Decimal LineTotal
		{
			get	{ return _lineTotal; }
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the OrderQty field. Mapped on target field 'OrderQty'. </summary>
		public System.Int16 OrderQty
		{
			get	{ return _orderQty; }
			set
			{
				if((_orderQty != value))
				{
					OnOrderQtyChanging(value);
					SendPropertyChanging("OrderQty");
					_orderQty = value;
					SendPropertyChanged("OrderQty");
					OnOrderQtyChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Int32 ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					if(_product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the PurchaseOrderDetailId field. Mapped on target field 'PurchaseOrderDetailID'. </summary>
		public System.Int32 PurchaseOrderDetailId
		{
			get	{ return _purchaseOrderDetailId; }
			set
			{
				if((_purchaseOrderDetailId != value))
				{
					OnPurchaseOrderDetailIdChanging(value);
					SendPropertyChanging("PurchaseOrderDetailId");
					_purchaseOrderDetailId = value;
					SendPropertyChanged("PurchaseOrderDetailId");
					OnPurchaseOrderDetailIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the PurchaseOrderId field. Mapped on target field 'PurchaseOrderID'. </summary>
		public System.Int32 PurchaseOrderId
		{
			get	{ return _purchaseOrderId; }
			set
			{
				if((_purchaseOrderId != value))
				{
					if(_purchaseOrderHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnPurchaseOrderIdChanging(value);
					SendPropertyChanging("PurchaseOrderId");
					_purchaseOrderId = value;
					SendPropertyChanged("PurchaseOrderId");
					OnPurchaseOrderIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ReceivedQty field. Mapped on target field 'ReceivedQty'. </summary>
		public System.Decimal ReceivedQty
		{
			get	{ return _receivedQty; }
			set
			{
				if((_receivedQty != value))
				{
					OnReceivedQtyChanging(value);
					SendPropertyChanging("ReceivedQty");
					_receivedQty = value;
					SendPropertyChanged("ReceivedQty");
					OnReceivedQtyChanged();
				}
			}
		}

		/// <summary>Gets or sets the RejectedQty field. Mapped on target field 'RejectedQty'. </summary>
		public System.Decimal RejectedQty
		{
			get	{ return _rejectedQty; }
			set
			{
				if((_rejectedQty != value))
				{
					OnRejectedQtyChanging(value);
					SendPropertyChanging("RejectedQty");
					_rejectedQty = value;
					SendPropertyChanged("RejectedQty");
					OnRejectedQtyChanged();
				}
			}
		}

		/// <summary>Gets or sets the StockedQty field. Mapped on target field 'StockedQty'. </summary>
		public System.Decimal StockedQty
		{
			get	{ return _stockedQty; }
		}

		/// <summary>Gets or sets the UnitPrice field. Mapped on target field 'UnitPrice'. </summary>
		public System.Decimal UnitPrice
		{
			get	{ return _unitPrice; }
			set
			{
				if((_unitPrice != value))
				{
					OnUnitPriceChanging(value);
					SendPropertyChanging("UnitPrice");
					_unitPrice = value;
					SendPropertyChanged("UnitPrice");
					OnUnitPriceChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'PurchaseOrderDetail.Product - Product.PurchaseOrderDetails (m:1)'</summary>
		public Product Product
		{
			get { return _product.Entity; }
			set
			{
				Product previousValue = _product.Entity;
				if((previousValue != value) || (_product.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Product");
					if(previousValue != null)
					{
						_product.Entity = null;
						previousValue.PurchaseOrderDetails.Remove(this);
					}
					_product.Entity = value;
					if(value == null)
					{
						_productId = default(System.Int32);
					}
					else
					{
						value.PurchaseOrderDetails.Add(this);
						_productId = value.ProductId;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PurchaseOrderDetail.PurchaseOrderHeader - PurchaseOrderHeader.PurchaseOrderDetails (m:1)'</summary>
		public PurchaseOrderHeader PurchaseOrderHeader
		{
			get { return _purchaseOrderHeader.Entity; }
			set
			{
				PurchaseOrderHeader previousValue = _purchaseOrderHeader.Entity;
				if((previousValue != value) || (_purchaseOrderHeader.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("PurchaseOrderHeader");
					if(previousValue != null)
					{
						_purchaseOrderHeader.Entity = null;
						previousValue.PurchaseOrderDetails.Remove(this);
					}
					_purchaseOrderHeader.Entity = value;
					if(value == null)
					{
						_purchaseOrderId = default(System.Int32);
					}
					else
					{
						value.PurchaseOrderDetails.Add(this);
						_purchaseOrderId = value.PurchaseOrderId;
					}
					this.SendPropertyChanged("PurchaseOrderHeader");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649