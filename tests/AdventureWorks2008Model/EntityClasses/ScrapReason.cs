#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'ScrapReason', mapped on table 'AdventureWorks.Production.ScrapReason'.</summary>
	public partial class ScrapReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private System.Int16	_scrapReasonId;
		private EntitySet <WorkOrder> _workOrders;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		partial void OnScrapReasonIdChanging(System.Int16 value);
		partial void OnScrapReasonIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="ScrapReason"/> class.</summary>
		public ScrapReason()
		{
			_workOrders = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.Attach_WorkOrders), new Action<WorkOrder>(this.Detach_WorkOrders) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging("WorkOrders");
			entity.ScrapReason = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging("WorkOrders");
			entity.ScrapReason = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ScrapReasonId field. Mapped on target field 'ScrapReasonID'. </summary>
		public System.Int16 ScrapReasonId
		{
			get	{ return _scrapReasonId; }
			set
			{
				if((_scrapReasonId != value))
				{
					OnScrapReasonIdChanging(value);
					SendPropertyChanging("ScrapReasonId");
					_scrapReasonId = value;
					SendPropertyChanged("ScrapReasonId");
					OnScrapReasonIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'WorkOrder.ScrapReason - ScrapReason.WorkOrders (m:1)'</summary>
		public EntitySet<WorkOrder> WorkOrders
		{
			get { return this._workOrders; }
			set { this._workOrders.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649