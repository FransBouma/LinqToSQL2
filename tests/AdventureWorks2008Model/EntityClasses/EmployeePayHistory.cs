#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'EmployeePayHistory', mapped on table 'AdventureWorks.HumanResources.EmployeePayHistory'.</summary>
	public partial class EmployeePayHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_businessEntityId;
		private System.DateTime	_modifiedDate;
		private System.Byte	_payFrequency;
		private System.Decimal	_rate;
		private System.DateTime	_rateChangeDate;
		private EntityRef <Employee> _employee;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBusinessEntityIdChanging(System.Int32 value);
		partial void OnBusinessEntityIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnPayFrequencyChanging(System.Byte value);
		partial void OnPayFrequencyChanged();
		partial void OnRateChanging(System.Decimal value);
		partial void OnRateChanged();
		partial void OnRateChangeDateChanging(System.DateTime value);
		partial void OnRateChangeDateChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="EmployeePayHistory"/> class.</summary>
		public EmployeePayHistory()
		{
			_employee = default(EntityRef<Employee>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		public System.Int32 BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the PayFrequency field. Mapped on target field 'PayFrequency'. </summary>
		public System.Byte PayFrequency
		{
			get	{ return _payFrequency; }
			set
			{
				if((_payFrequency != value))
				{
					OnPayFrequencyChanging(value);
					SendPropertyChanging("PayFrequency");
					_payFrequency = value;
					SendPropertyChanged("PayFrequency");
					OnPayFrequencyChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rate field. Mapped on target field 'Rate'. </summary>
		public System.Decimal Rate
		{
			get	{ return _rate; }
			set
			{
				if((_rate != value))
				{
					OnRateChanging(value);
					SendPropertyChanging("Rate");
					_rate = value;
					SendPropertyChanged("Rate");
					OnRateChanged();
				}
			}
		}

		/// <summary>Gets or sets the RateChangeDate field. Mapped on target field 'RateChangeDate'. </summary>
		public System.DateTime RateChangeDate
		{
			get	{ return _rateChangeDate; }
			set
			{
				if((_rateChangeDate != value))
				{
					OnRateChangeDateChanging(value);
					SendPropertyChanging("RateChangeDate");
					_rateChangeDate = value;
					SendPropertyChanged("RateChangeDate");
					OnRateChangeDateChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'EmployeePayHistory.Employee - Employee.EmployeePayHistories (m:1)'</summary>
		public Employee Employee
		{
			get { return _employee.Entity; }
			set
			{
				Employee previousValue = _employee.Entity;
				if((previousValue != value) || (_employee.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Employee");
					if(previousValue != null)
					{
						_employee.Entity = null;
						previousValue.EmployeePayHistories.Remove(this);
					}
					_employee.Entity = value;
					if(value == null)
					{
						_businessEntityId = default(System.Int32);
					}
					else
					{
						value.EmployeePayHistories.Add(this);
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649