#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'Location', mapped on table 'AdventureWorks.Production.Location'.</summary>
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Decimal	_availability;
		private System.Decimal	_costRate;
		private System.Int16	_locationId;
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private EntitySet <ProductInventory> _productInventories;
		private EntitySet <WorkOrderRouting> _workOrderRoutings;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAvailabilityChanging(System.Decimal value);
		partial void OnAvailabilityChanged();
		partial void OnCostRateChanging(System.Decimal value);
		partial void OnCostRateChanged();
		partial void OnLocationIdChanging(System.Int16 value);
		partial void OnLocationIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Location"/> class.</summary>
		public Location()
		{
			_productInventories = new EntitySet<ProductInventory>(new Action<ProductInventory>(this.Attach_ProductInventories), new Action<ProductInventory>(this.Detach_ProductInventories) );
			_workOrderRoutings = new EntitySet<WorkOrderRouting>(new Action<WorkOrderRouting>(this.Attach_WorkOrderRoutings), new Action<WorkOrderRouting>(this.Detach_WorkOrderRoutings) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging("ProductInventories");
			entity.Location = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging("ProductInventories");
			entity.Location = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_WorkOrderRoutings(WorkOrderRouting entity)
		{
			this.SendPropertyChanging("WorkOrderRoutings");
			entity.Location = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_WorkOrderRoutings(WorkOrderRouting entity)
		{
			this.SendPropertyChanging("WorkOrderRoutings");
			entity.Location = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the Availability field. Mapped on target field 'Availability'. </summary>
		public System.Decimal Availability
		{
			get	{ return _availability; }
			set
			{
				if((_availability != value))
				{
					OnAvailabilityChanging(value);
					SendPropertyChanging("Availability");
					_availability = value;
					SendPropertyChanged("Availability");
					OnAvailabilityChanged();
				}
			}
		}

		/// <summary>Gets or sets the CostRate field. Mapped on target field 'CostRate'. </summary>
		public System.Decimal CostRate
		{
			get	{ return _costRate; }
			set
			{
				if((_costRate != value))
				{
					OnCostRateChanging(value);
					SendPropertyChanging("CostRate");
					_costRate = value;
					SendPropertyChanged("CostRate");
					OnCostRateChanged();
				}
			}
		}

		/// <summary>Gets or sets the LocationId field. Mapped on target field 'LocationID'. </summary>
		public System.Int16 LocationId
		{
			get	{ return _locationId; }
			set
			{
				if((_locationId != value))
				{
					OnLocationIdChanging(value);
					SendPropertyChanging("LocationId");
					_locationId = value;
					SendPropertyChanged("LocationId");
					OnLocationIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'ProductInventory.Location - Location.ProductInventories (m:1)'</summary>
		public EntitySet<ProductInventory> ProductInventories
		{
			get { return this._productInventories; }
			set { this._productInventories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'WorkOrderRouting.Location - Location.WorkOrderRoutings (m:1)'</summary>
		public EntitySet<WorkOrderRouting> WorkOrderRoutings
		{
			get { return this._workOrderRoutings; }
			set { this._workOrderRoutings.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649