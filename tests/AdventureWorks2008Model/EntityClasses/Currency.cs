#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'Currency', mapped on table 'AdventureWorks.Sales.Currency'.</summary>
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_currencyCode;
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private EntitySet <CountryRegionCurrency> _countryRegionCurrencies;
		private EntitySet <CurrencyRate> _currencyRates;
		private EntitySet <CurrencyRate> _currencyRates1;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCurrencyCodeChanging(System.String value);
		partial void OnCurrencyCodeChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Currency"/> class.</summary>
		public Currency()
		{
			_countryRegionCurrencies = new EntitySet<CountryRegionCurrency>(new Action<CountryRegionCurrency>(this.Attach_CountryRegionCurrencies), new Action<CountryRegionCurrency>(this.Detach_CountryRegionCurrencies) );
			_currencyRates = new EntitySet<CurrencyRate>(new Action<CurrencyRate>(this.Attach_CurrencyRates), new Action<CurrencyRate>(this.Detach_CurrencyRates) );
			_currencyRates1 = new EntitySet<CurrencyRate>(new Action<CurrencyRate>(this.Attach_CurrencyRates1), new Action<CurrencyRate>(this.Detach_CurrencyRates1) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_CountryRegionCurrencies(CountryRegionCurrency entity)
		{
			this.SendPropertyChanging("CountryRegionCurrencies");
			entity.Currency = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_CountryRegionCurrencies(CountryRegionCurrency entity)
		{
			this.SendPropertyChanging("CountryRegionCurrencies");
			entity.Currency = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_CurrencyRates(CurrencyRate entity)
		{
			this.SendPropertyChanging("CurrencyRates");
			entity.Currency = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_CurrencyRates(CurrencyRate entity)
		{
			this.SendPropertyChanging("CurrencyRates");
			entity.Currency = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_CurrencyRates1(CurrencyRate entity)
		{
			this.SendPropertyChanging("CurrencyRates1");
			entity.Currency1 = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_CurrencyRates1(CurrencyRate entity)
		{
			this.SendPropertyChanging("CurrencyRates1");
			entity.Currency1 = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the CurrencyCode field. Mapped on target field 'CurrencyCode'. </summary>
		public System.String CurrencyCode
		{
			get	{ return _currencyCode; }
			set
			{
				if((_currencyCode != value))
				{
					OnCurrencyCodeChanging(value);
					SendPropertyChanging("CurrencyCode");
					_currencyCode = value;
					SendPropertyChanged("CurrencyCode");
					OnCurrencyCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'CountryRegionCurrency.Currency - Currency.CountryRegionCurrencies (m:1)'</summary>
		public EntitySet<CountryRegionCurrency> CountryRegionCurrencies
		{
			get { return this._countryRegionCurrencies; }
			set { this._countryRegionCurrencies.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'CurrencyRate.Currency - Currency.CurrencyRates (m:1)'</summary>
		public EntitySet<CurrencyRate> CurrencyRates
		{
			get { return this._currencyRates; }
			set { this._currencyRates.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'CurrencyRate.Currency1 - Currency.CurrencyRates1 (m:1)'</summary>
		public EntitySet<CurrencyRate> CurrencyRates1
		{
			get { return this._currencyRates1; }
			set { this._currencyRates1.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649