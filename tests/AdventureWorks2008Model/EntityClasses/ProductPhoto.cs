#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'ProductPhoto', mapped on table 'AdventureWorks.Production.ProductPhoto'.</summary>
	public partial class ProductPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Data.Linq.Binary	_largePhoto;
		private System.String	_largePhotoFileName;
		private System.DateTime	_modifiedDate;
		private System.Int32	_productPhotoId;
		private System.Data.Linq.Binary	_thumbNailPhoto;
		private System.String	_thumbnailPhotoFileName;
		private EntitySet <ProductProductPhoto> _productProductPhotos;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnLargePhotoChanging(System.Data.Linq.Binary value);
		partial void OnLargePhotoChanged();
		partial void OnLargePhotoFileNameChanging(System.String value);
		partial void OnLargePhotoFileNameChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnProductPhotoIdChanging(System.Int32 value);
		partial void OnProductPhotoIdChanged();
		partial void OnThumbNailPhotoChanging(System.Data.Linq.Binary value);
		partial void OnThumbNailPhotoChanged();
		partial void OnThumbnailPhotoFileNameChanging(System.String value);
		partial void OnThumbnailPhotoFileNameChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="ProductPhoto"/> class.</summary>
		public ProductPhoto()
		{
			_productProductPhotos = new EntitySet<ProductProductPhoto>(new Action<ProductProductPhoto>(this.Attach_ProductProductPhotos), new Action<ProductProductPhoto>(this.Detach_ProductProductPhotos) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductProductPhotos(ProductProductPhoto entity)
		{
			this.SendPropertyChanging("ProductProductPhotos");
			entity.ProductPhoto = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductProductPhotos(ProductProductPhoto entity)
		{
			this.SendPropertyChanging("ProductProductPhotos");
			entity.ProductPhoto = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the LargePhoto field. Mapped on target field 'LargePhoto'. </summary>
		public System.Data.Linq.Binary LargePhoto
		{
			get	{ return _largePhoto; }
			set
			{
				if((_largePhoto != value))
				{
					OnLargePhotoChanging(value);
					SendPropertyChanging("LargePhoto");
					_largePhoto = value;
					SendPropertyChanged("LargePhoto");
					OnLargePhotoChanged();
				}
			}
		}

		/// <summary>Gets or sets the LargePhotoFileName field. Mapped on target field 'LargePhotoFileName'. </summary>
		public System.String LargePhotoFileName
		{
			get	{ return _largePhotoFileName; }
			set
			{
				if((_largePhotoFileName != value))
				{
					OnLargePhotoFileNameChanging(value);
					SendPropertyChanging("LargePhotoFileName");
					_largePhotoFileName = value;
					SendPropertyChanged("LargePhotoFileName");
					OnLargePhotoFileNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductPhotoId field. Mapped on target field 'ProductPhotoID'. </summary>
		public System.Int32 ProductPhotoId
		{
			get	{ return _productPhotoId; }
			set
			{
				if((_productPhotoId != value))
				{
					OnProductPhotoIdChanging(value);
					SendPropertyChanging("ProductPhotoId");
					_productPhotoId = value;
					SendPropertyChanged("ProductPhotoId");
					OnProductPhotoIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ThumbNailPhoto field. Mapped on target field 'ThumbNailPhoto'. </summary>
		public System.Data.Linq.Binary ThumbNailPhoto
		{
			get	{ return _thumbNailPhoto; }
			set
			{
				if((_thumbNailPhoto != value))
				{
					OnThumbNailPhotoChanging(value);
					SendPropertyChanging("ThumbNailPhoto");
					_thumbNailPhoto = value;
					SendPropertyChanged("ThumbNailPhoto");
					OnThumbNailPhotoChanged();
				}
			}
		}

		/// <summary>Gets or sets the ThumbnailPhotoFileName field. Mapped on target field 'ThumbnailPhotoFileName'. </summary>
		public System.String ThumbnailPhotoFileName
		{
			get	{ return _thumbnailPhotoFileName; }
			set
			{
				if((_thumbnailPhotoFileName != value))
				{
					OnThumbnailPhotoFileNameChanging(value);
					SendPropertyChanging("ThumbnailPhotoFileName");
					_thumbnailPhotoFileName = value;
					SendPropertyChanged("ThumbnailPhotoFileName");
					OnThumbnailPhotoFileNameChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'ProductProductPhoto.ProductPhoto - ProductPhoto.ProductProductPhotos (m:1)'</summary>
		public EntitySet<ProductProductPhoto> ProductProductPhotos
		{
			get { return this._productProductPhotos; }
			set { this._productProductPhotos.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649