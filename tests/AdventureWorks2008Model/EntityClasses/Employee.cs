#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'Employee', mapped on table 'AdventureWorks.HumanResources.Employee'.</summary>
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_birthDate;
		private System.Int32	_businessEntityId;
		private System.Boolean	_currentFlag;
		private System.String	_gender;
		private System.DateTime	_hireDate;
		private System.String	_jobTitle;
		private System.String	_loginId;
		private System.String	_maritalStatus;
		private System.DateTime	_modifiedDate;
		private System.String	_nationalIdnumber;
		private Nullable<System.Int16>	_organizationLevel;
		private System.String	_organizationNode;
		private System.Guid	_rowguid;
		private System.Boolean	_salariedFlag;
		private System.Int16	_sickLeaveHours;
		private System.Int16	_vacationHours;
		private EntitySet <Document> _documents;
		private EntitySet <EmployeeDepartmentHistory> _employeeDepartmentHistories;
		private EntitySet <EmployeePayHistory> _employeePayHistories;
		private EntitySet <JobCandidate> _jobCandidates;
		private EntityRef <Person> _person;
		private EntitySet <PurchaseOrderHeader> _purchaseOrderHeaders;
		private EntityRef <SalesPerson> _salesPerson;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBirthDateChanging(System.DateTime value);
		partial void OnBirthDateChanged();
		partial void OnBusinessEntityIdChanging(System.Int32 value);
		partial void OnBusinessEntityIdChanged();
		partial void OnCurrentFlagChanging(System.Boolean value);
		partial void OnCurrentFlagChanged();
		partial void OnGenderChanging(System.String value);
		partial void OnGenderChanged();
		partial void OnHireDateChanging(System.DateTime value);
		partial void OnHireDateChanged();
		partial void OnJobTitleChanging(System.String value);
		partial void OnJobTitleChanged();
		partial void OnLoginIdChanging(System.String value);
		partial void OnLoginIdChanged();
		partial void OnMaritalStatusChanging(System.String value);
		partial void OnMaritalStatusChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNationalIdnumberChanging(System.String value);
		partial void OnNationalIdnumberChanged();
		partial void OnOrganizationLevelChanging(Nullable<System.Int16> value);
		partial void OnOrganizationLevelChanged();
		partial void OnOrganizationNodeChanging(System.String value);
		partial void OnOrganizationNodeChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSalariedFlagChanging(System.Boolean value);
		partial void OnSalariedFlagChanged();
		partial void OnSickLeaveHoursChanging(System.Int16 value);
		partial void OnSickLeaveHoursChanged();
		partial void OnVacationHoursChanging(System.Int16 value);
		partial void OnVacationHoursChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Employee"/> class.</summary>
		public Employee()
		{
			_documents = new EntitySet<Document>(new Action<Document>(this.Attach_Documents), new Action<Document>(this.Detach_Documents) );
			_employeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.Attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.Detach_EmployeeDepartmentHistories) );
			_employeePayHistories = new EntitySet<EmployeePayHistory>(new Action<EmployeePayHistory>(this.Attach_EmployeePayHistories), new Action<EmployeePayHistory>(this.Detach_EmployeePayHistories) );
			_jobCandidates = new EntitySet<JobCandidate>(new Action<JobCandidate>(this.Attach_JobCandidates), new Action<JobCandidate>(this.Detach_JobCandidates) );
			_person = default(EntityRef<Person>);
			_purchaseOrderHeaders = new EntitySet<PurchaseOrderHeader>(new Action<PurchaseOrderHeader>(this.Attach_PurchaseOrderHeaders), new Action<PurchaseOrderHeader>(this.Detach_PurchaseOrderHeaders) );
			_salesPerson = default(EntityRef<SalesPerson>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Documents(Document entity)
		{
			this.SendPropertyChanging("Documents");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Documents(Document entity)
		{
			this.SendPropertyChanging("Documents");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging("EmployeeDepartmentHistories");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging("EmployeeDepartmentHistories");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging("EmployeePayHistories");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging("EmployeePayHistories");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging("JobCandidates");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging("JobCandidates");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_PurchaseOrderHeaders(PurchaseOrderHeader entity)
		{
			this.SendPropertyChanging("PurchaseOrderHeaders");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_PurchaseOrderHeaders(PurchaseOrderHeader entity)
		{
			this.SendPropertyChanging("PurchaseOrderHeaders");
			entity.Employee = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the BirthDate field. Mapped on target field 'BirthDate'. </summary>
		public System.DateTime BirthDate
		{
			get	{ return _birthDate; }
			set
			{
				if((_birthDate != value))
				{
					OnBirthDateChanging(value);
					SendPropertyChanging("BirthDate");
					_birthDate = value;
					SendPropertyChanged("BirthDate");
					OnBirthDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		public System.Int32 BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CurrentFlag field. Mapped on target field 'CurrentFlag'. </summary>
		public System.Boolean CurrentFlag
		{
			get	{ return _currentFlag; }
			set
			{
				if((_currentFlag != value))
				{
					OnCurrentFlagChanging(value);
					SendPropertyChanging("CurrentFlag");
					_currentFlag = value;
					SendPropertyChanged("CurrentFlag");
					OnCurrentFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the Gender field. Mapped on target field 'Gender'. </summary>
		public System.String Gender
		{
			get	{ return _gender; }
			set
			{
				if((_gender != value))
				{
					OnGenderChanging(value);
					SendPropertyChanging("Gender");
					_gender = value;
					SendPropertyChanged("Gender");
					OnGenderChanged();
				}
			}
		}

		/// <summary>Gets or sets the HireDate field. Mapped on target field 'HireDate'. </summary>
		public System.DateTime HireDate
		{
			get	{ return _hireDate; }
			set
			{
				if((_hireDate != value))
				{
					OnHireDateChanging(value);
					SendPropertyChanging("HireDate");
					_hireDate = value;
					SendPropertyChanged("HireDate");
					OnHireDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the JobTitle field. Mapped on target field 'JobTitle'. </summary>
		public System.String JobTitle
		{
			get	{ return _jobTitle; }
			set
			{
				if((_jobTitle != value))
				{
					OnJobTitleChanging(value);
					SendPropertyChanging("JobTitle");
					_jobTitle = value;
					SendPropertyChanged("JobTitle");
					OnJobTitleChanged();
				}
			}
		}

		/// <summary>Gets or sets the LoginId field. Mapped on target field 'LoginID'. </summary>
		public System.String LoginId
		{
			get	{ return _loginId; }
			set
			{
				if((_loginId != value))
				{
					OnLoginIdChanging(value);
					SendPropertyChanging("LoginId");
					_loginId = value;
					SendPropertyChanged("LoginId");
					OnLoginIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the MaritalStatus field. Mapped on target field 'MaritalStatus'. </summary>
		public System.String MaritalStatus
		{
			get	{ return _maritalStatus; }
			set
			{
				if((_maritalStatus != value))
				{
					OnMaritalStatusChanging(value);
					SendPropertyChanging("MaritalStatus");
					_maritalStatus = value;
					SendPropertyChanged("MaritalStatus");
					OnMaritalStatusChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the NationalIdnumber field. Mapped on target field 'NationalIDNumber'. </summary>
		public System.String NationalIdnumber
		{
			get	{ return _nationalIdnumber; }
			set
			{
				if((_nationalIdnumber != value))
				{
					OnNationalIdnumberChanging(value);
					SendPropertyChanging("NationalIdnumber");
					_nationalIdnumber = value;
					SendPropertyChanged("NationalIdnumber");
					OnNationalIdnumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the OrganizationLevel field. Mapped on target field 'OrganizationLevel'. </summary>
		public Nullable<System.Int16> OrganizationLevel
		{
			get	{ return _organizationLevel; }
		}

		/// <summary>Gets or sets the OrganizationNode field. Mapped on target field 'OrganizationNode'. </summary>
		public System.String OrganizationNode
		{
			get	{ return _organizationNode; }
			set
			{
				if((_organizationNode != value))
				{
					OnOrganizationNodeChanging(value);
					SendPropertyChanging("OrganizationNode");
					_organizationNode = value;
					SendPropertyChanged("OrganizationNode");
					OnOrganizationNodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalariedFlag field. Mapped on target field 'SalariedFlag'. </summary>
		public System.Boolean SalariedFlag
		{
			get	{ return _salariedFlag; }
			set
			{
				if((_salariedFlag != value))
				{
					OnSalariedFlagChanging(value);
					SendPropertyChanging("SalariedFlag");
					_salariedFlag = value;
					SendPropertyChanged("SalariedFlag");
					OnSalariedFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the SickLeaveHours field. Mapped on target field 'SickLeaveHours'. </summary>
		public System.Int16 SickLeaveHours
		{
			get	{ return _sickLeaveHours; }
			set
			{
				if((_sickLeaveHours != value))
				{
					OnSickLeaveHoursChanging(value);
					SendPropertyChanging("SickLeaveHours");
					_sickLeaveHours = value;
					SendPropertyChanged("SickLeaveHours");
					OnSickLeaveHoursChanged();
				}
			}
		}

		/// <summary>Gets or sets the VacationHours field. Mapped on target field 'VacationHours'. </summary>
		public System.Int16 VacationHours
		{
			get	{ return _vacationHours; }
			set
			{
				if((_vacationHours != value))
				{
					OnVacationHoursChanging(value);
					SendPropertyChanging("VacationHours");
					_vacationHours = value;
					SendPropertyChanged("VacationHours");
					OnVacationHoursChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'Document.Employee - Employee.Documents (m:1)'</summary>
		public EntitySet<Document> Documents
		{
			get { return this._documents; }
			set { this._documents.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeeDepartmentHistory.Employee - Employee.EmployeeDepartmentHistories (m:1)'</summary>
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get { return this._employeeDepartmentHistories; }
			set { this._employeeDepartmentHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeePayHistory.Employee - Employee.EmployeePayHistories (m:1)'</summary>
		public EntitySet<EmployeePayHistory> EmployeePayHistories
		{
			get { return this._employeePayHistories; }
			set { this._employeePayHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'JobCandidate.Employee - Employee.JobCandidates (m:1)'</summary>
		public EntitySet<JobCandidate> JobCandidates
		{
			get { return this._jobCandidates; }
			set { this._jobCandidates.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Person - Person.Employee (1:1)'</summary>
		public Person Person
		{
			get { return _person.Entity; }
			set
			{
				Person previousValue = _person.Entity;
				if((previousValue != value) || (_person.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Person");
					if(previousValue != null)
					{
						_person.Entity = null;
						previousValue.Employee=null;
					}
					_person.Entity = value;
					if(value==null)
					{
						_businessEntityId = default(System.Int32);
					}
					else
					{
						value.Employee = this;
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PurchaseOrderHeader.Employee - Employee.PurchaseOrderHeaders (m:1)'</summary>
		public EntitySet<PurchaseOrderHeader> PurchaseOrderHeaders
		{
			get { return this._purchaseOrderHeaders; }
			set { this._purchaseOrderHeaders.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesPerson.Employee - Employee.SalesPerson (1:1)'</summary>
		public SalesPerson SalesPerson
		{
			get { return _salesPerson.Entity; }
			set
			{
				SalesPerson previousValue = _salesPerson.Entity;
				if((previousValue != value) || (_salesPerson.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesPerson");
					if(previousValue != null)
					{
						_salesPerson.Entity = null;
						previousValue.Employee=null;
					}
					_salesPerson.Entity = value;
					if(value != null)
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("SalesPerson");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649