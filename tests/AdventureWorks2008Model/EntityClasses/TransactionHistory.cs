#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'TransactionHistory', mapped on table 'AdventureWorks.Production.TransactionHistory'.</summary>
	public partial class TransactionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Decimal	_actualCost;
		private System.DateTime	_modifiedDate;
		private System.Int32	_productId;
		private System.Int32	_quantity;
		private System.Int32	_referenceOrderId;
		private System.Int32	_referenceOrderLineId;
		private System.DateTime	_transactionDate;
		private System.Int32	_transactionId;
		private System.String	_transactionType;
		private EntityRef <Product> _product;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActualCostChanging(System.Decimal value);
		partial void OnActualCostChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnProductIdChanging(System.Int32 value);
		partial void OnProductIdChanged();
		partial void OnQuantityChanging(System.Int32 value);
		partial void OnQuantityChanged();
		partial void OnReferenceOrderIdChanging(System.Int32 value);
		partial void OnReferenceOrderIdChanged();
		partial void OnReferenceOrderLineIdChanging(System.Int32 value);
		partial void OnReferenceOrderLineIdChanged();
		partial void OnTransactionDateChanging(System.DateTime value);
		partial void OnTransactionDateChanged();
		partial void OnTransactionIdChanging(System.Int32 value);
		partial void OnTransactionIdChanged();
		partial void OnTransactionTypeChanging(System.String value);
		partial void OnTransactionTypeChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="TransactionHistory"/> class.</summary>
		public TransactionHistory()
		{
			_product = default(EntityRef<Product>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the ActualCost field. Mapped on target field 'ActualCost'. </summary>
		public System.Decimal ActualCost
		{
			get	{ return _actualCost; }
			set
			{
				if((_actualCost != value))
				{
					OnActualCostChanging(value);
					SendPropertyChanging("ActualCost");
					_actualCost = value;
					SendPropertyChanged("ActualCost");
					OnActualCostChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Int32 ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					if(_product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Quantity field. Mapped on target field 'Quantity'. </summary>
		public System.Int32 Quantity
		{
			get	{ return _quantity; }
			set
			{
				if((_quantity != value))
				{
					OnQuantityChanging(value);
					SendPropertyChanging("Quantity");
					_quantity = value;
					SendPropertyChanged("Quantity");
					OnQuantityChanged();
				}
			}
		}

		/// <summary>Gets or sets the ReferenceOrderId field. Mapped on target field 'ReferenceOrderID'. </summary>
		public System.Int32 ReferenceOrderId
		{
			get	{ return _referenceOrderId; }
			set
			{
				if((_referenceOrderId != value))
				{
					OnReferenceOrderIdChanging(value);
					SendPropertyChanging("ReferenceOrderId");
					_referenceOrderId = value;
					SendPropertyChanged("ReferenceOrderId");
					OnReferenceOrderIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ReferenceOrderLineId field. Mapped on target field 'ReferenceOrderLineID'. </summary>
		public System.Int32 ReferenceOrderLineId
		{
			get	{ return _referenceOrderLineId; }
			set
			{
				if((_referenceOrderLineId != value))
				{
					OnReferenceOrderLineIdChanging(value);
					SendPropertyChanging("ReferenceOrderLineId");
					_referenceOrderLineId = value;
					SendPropertyChanged("ReferenceOrderLineId");
					OnReferenceOrderLineIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the TransactionDate field. Mapped on target field 'TransactionDate'. </summary>
		public System.DateTime TransactionDate
		{
			get	{ return _transactionDate; }
			set
			{
				if((_transactionDate != value))
				{
					OnTransactionDateChanging(value);
					SendPropertyChanging("TransactionDate");
					_transactionDate = value;
					SendPropertyChanged("TransactionDate");
					OnTransactionDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the TransactionId field. Mapped on target field 'TransactionID'. </summary>
		public System.Int32 TransactionId
		{
			get	{ return _transactionId; }
			set
			{
				if((_transactionId != value))
				{
					OnTransactionIdChanging(value);
					SendPropertyChanging("TransactionId");
					_transactionId = value;
					SendPropertyChanged("TransactionId");
					OnTransactionIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the TransactionType field. Mapped on target field 'TransactionType'. </summary>
		public System.String TransactionType
		{
			get	{ return _transactionType; }
			set
			{
				if((_transactionType != value))
				{
					OnTransactionTypeChanging(value);
					SendPropertyChanging("TransactionType");
					_transactionType = value;
					SendPropertyChanged("TransactionType");
					OnTransactionTypeChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'TransactionHistory.Product - Product.TransactionHistories (m:1)'</summary>
		public Product Product
		{
			get { return _product.Entity; }
			set
			{
				Product previousValue = _product.Entity;
				if((previousValue != value) || (_product.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Product");
					if(previousValue != null)
					{
						_product.Entity = null;
						previousValue.TransactionHistories.Remove(this);
					}
					_product.Entity = value;
					if(value == null)
					{
						_productId = default(System.Int32);
					}
					else
					{
						value.TransactionHistories.Add(this);
						_productId = value.ProductId;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649