#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'Product', mapped on table 'AdventureWorks.Production.Product'.</summary>
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_class;
		private System.String	_color;
		private System.Int32	_daysToManufacture;
		private Nullable<System.DateTime>	_discontinuedDate;
		private System.Boolean	_finishedGoodsFlag;
		private System.Decimal	_listPrice;
		private System.Boolean	_makeFlag;
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private System.Int32	_productId;
		private System.String	_productLine;
		private Nullable<System.Int32>	_productModelId;
		private System.String	_productNumber;
		private Nullable<System.Int32>	_productSubcategoryId;
		private System.Int16	_reorderPoint;
		private System.Guid	_rowguid;
		private System.Int16	_safetyStockLevel;
		private Nullable<System.DateTime>	_sellEndDate;
		private System.DateTime	_sellStartDate;
		private System.String	_size;
		private System.String	_sizeUnitMeasureCode;
		private System.Decimal	_standardCost;
		private System.String	_style;
		private Nullable<System.Decimal>	_weight;
		private System.String	_weightUnitMeasureCode;
		private EntitySet <BillOfMaterial> _billOfMaterials;
		private EntitySet <BillOfMaterial> _billOfMaterials1;
		private EntitySet <ProductCostHistory> _productCostHistories;
		private EntitySet <ProductDocument> _productDocuments;
		private EntitySet <ProductInventory> _productInventories;
		private EntitySet <ProductListPriceHistory> _productListPriceHistories;
		private EntityRef <ProductModel> _productModel;
		private EntitySet <ProductProductPhoto> _productProductPhotos;
		private EntitySet <ProductReview> _productReviews;
		private EntityRef <ProductSubcategory> _productSubcategory;
		private EntitySet <ProductVendor> _productVendors;
		private EntitySet <PurchaseOrderDetail> _purchaseOrderDetails;
		private EntitySet <ShoppingCartItem> _shoppingCartItems;
		private EntitySet <SpecialOfferProduct> _specialOfferProducts;
		private EntitySet <TransactionHistory> _transactionHistories;
		private EntityRef <UnitMeasure> _unitMeasure;
		private EntityRef <UnitMeasure> _unitMeasure1;
		private EntitySet <WorkOrder> _workOrders;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnClassChanging(System.String value);
		partial void OnClassChanged();
		partial void OnColorChanging(System.String value);
		partial void OnColorChanged();
		partial void OnDaysToManufactureChanging(System.Int32 value);
		partial void OnDaysToManufactureChanged();
		partial void OnDiscontinuedDateChanging(Nullable<System.DateTime> value);
		partial void OnDiscontinuedDateChanged();
		partial void OnFinishedGoodsFlagChanging(System.Boolean value);
		partial void OnFinishedGoodsFlagChanged();
		partial void OnListPriceChanging(System.Decimal value);
		partial void OnListPriceChanged();
		partial void OnMakeFlagChanging(System.Boolean value);
		partial void OnMakeFlagChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		partial void OnProductIdChanging(System.Int32 value);
		partial void OnProductIdChanged();
		partial void OnProductLineChanging(System.String value);
		partial void OnProductLineChanged();
		partial void OnProductModelIdChanging(Nullable<System.Int32> value);
		partial void OnProductModelIdChanged();
		partial void OnProductNumberChanging(System.String value);
		partial void OnProductNumberChanged();
		partial void OnProductSubcategoryIdChanging(Nullable<System.Int32> value);
		partial void OnProductSubcategoryIdChanged();
		partial void OnReorderPointChanging(System.Int16 value);
		partial void OnReorderPointChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSafetyStockLevelChanging(System.Int16 value);
		partial void OnSafetyStockLevelChanged();
		partial void OnSellEndDateChanging(Nullable<System.DateTime> value);
		partial void OnSellEndDateChanged();
		partial void OnSellStartDateChanging(System.DateTime value);
		partial void OnSellStartDateChanged();
		partial void OnSizeChanging(System.String value);
		partial void OnSizeChanged();
		partial void OnSizeUnitMeasureCodeChanging(System.String value);
		partial void OnSizeUnitMeasureCodeChanged();
		partial void OnStandardCostChanging(System.Decimal value);
		partial void OnStandardCostChanged();
		partial void OnStyleChanging(System.String value);
		partial void OnStyleChanged();
		partial void OnWeightChanging(Nullable<System.Decimal> value);
		partial void OnWeightChanged();
		partial void OnWeightUnitMeasureCodeChanging(System.String value);
		partial void OnWeightUnitMeasureCodeChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Product"/> class.</summary>
		public Product()
		{
			_billOfMaterials = new EntitySet<BillOfMaterial>(new Action<BillOfMaterial>(this.Attach_BillOfMaterials), new Action<BillOfMaterial>(this.Detach_BillOfMaterials) );
			_billOfMaterials1 = new EntitySet<BillOfMaterial>(new Action<BillOfMaterial>(this.Attach_BillOfMaterials1), new Action<BillOfMaterial>(this.Detach_BillOfMaterials1) );
			_productCostHistories = new EntitySet<ProductCostHistory>(new Action<ProductCostHistory>(this.Attach_ProductCostHistories), new Action<ProductCostHistory>(this.Detach_ProductCostHistories) );
			_productDocuments = new EntitySet<ProductDocument>(new Action<ProductDocument>(this.Attach_ProductDocuments), new Action<ProductDocument>(this.Detach_ProductDocuments) );
			_productInventories = new EntitySet<ProductInventory>(new Action<ProductInventory>(this.Attach_ProductInventories), new Action<ProductInventory>(this.Detach_ProductInventories) );
			_productListPriceHistories = new EntitySet<ProductListPriceHistory>(new Action<ProductListPriceHistory>(this.Attach_ProductListPriceHistories), new Action<ProductListPriceHistory>(this.Detach_ProductListPriceHistories) );
			_productModel = default(EntityRef<ProductModel>);
			_productProductPhotos = new EntitySet<ProductProductPhoto>(new Action<ProductProductPhoto>(this.Attach_ProductProductPhotos), new Action<ProductProductPhoto>(this.Detach_ProductProductPhotos) );
			_productReviews = new EntitySet<ProductReview>(new Action<ProductReview>(this.Attach_ProductReviews), new Action<ProductReview>(this.Detach_ProductReviews) );
			_productSubcategory = default(EntityRef<ProductSubcategory>);
			_productVendors = new EntitySet<ProductVendor>(new Action<ProductVendor>(this.Attach_ProductVendors), new Action<ProductVendor>(this.Detach_ProductVendors) );
			_purchaseOrderDetails = new EntitySet<PurchaseOrderDetail>(new Action<PurchaseOrderDetail>(this.Attach_PurchaseOrderDetails), new Action<PurchaseOrderDetail>(this.Detach_PurchaseOrderDetails) );
			_shoppingCartItems = new EntitySet<ShoppingCartItem>(new Action<ShoppingCartItem>(this.Attach_ShoppingCartItems), new Action<ShoppingCartItem>(this.Detach_ShoppingCartItems) );
			_specialOfferProducts = new EntitySet<SpecialOfferProduct>(new Action<SpecialOfferProduct>(this.Attach_SpecialOfferProducts), new Action<SpecialOfferProduct>(this.Detach_SpecialOfferProducts) );
			_transactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.Attach_TransactionHistories), new Action<TransactionHistory>(this.Detach_TransactionHistories) );
			_unitMeasure = default(EntityRef<UnitMeasure>);
			_unitMeasure1 = default(EntityRef<UnitMeasure>);
			_workOrders = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.Attach_WorkOrders), new Action<WorkOrder>(this.Detach_WorkOrders) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BillOfMaterials(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BillOfMaterials(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BillOfMaterials1(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials1");
			entity.Product1 = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BillOfMaterials1(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials1");
			entity.Product1 = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductCostHistories(ProductCostHistory entity)
		{
			this.SendPropertyChanging("ProductCostHistories");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductCostHistories(ProductCostHistory entity)
		{
			this.SendPropertyChanging("ProductCostHistories");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductDocuments(ProductDocument entity)
		{
			this.SendPropertyChanging("ProductDocuments");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductDocuments(ProductDocument entity)
		{
			this.SendPropertyChanging("ProductDocuments");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging("ProductInventories");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductInventories(ProductInventory entity)
		{
			this.SendPropertyChanging("ProductInventories");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductListPriceHistories(ProductListPriceHistory entity)
		{
			this.SendPropertyChanging("ProductListPriceHistories");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductListPriceHistories(ProductListPriceHistory entity)
		{
			this.SendPropertyChanging("ProductListPriceHistories");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductProductPhotos(ProductProductPhoto entity)
		{
			this.SendPropertyChanging("ProductProductPhotos");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductProductPhotos(ProductProductPhoto entity)
		{
			this.SendPropertyChanging("ProductProductPhotos");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging("ProductReviews");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductReviews(ProductReview entity)
		{
			this.SendPropertyChanging("ProductReviews");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductVendors(ProductVendor entity)
		{
			this.SendPropertyChanging("ProductVendors");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductVendors(ProductVendor entity)
		{
			this.SendPropertyChanging("ProductVendors");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_PurchaseOrderDetails(PurchaseOrderDetail entity)
		{
			this.SendPropertyChanging("PurchaseOrderDetails");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_PurchaseOrderDetails(PurchaseOrderDetail entity)
		{
			this.SendPropertyChanging("PurchaseOrderDetails");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging("ShoppingCartItems");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ShoppingCartItems(ShoppingCartItem entity)
		{
			this.SendPropertyChanging("ShoppingCartItems");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SpecialOfferProducts(SpecialOfferProduct entity)
		{
			this.SendPropertyChanging("SpecialOfferProducts");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SpecialOfferProducts(SpecialOfferProduct entity)
		{
			this.SendPropertyChanging("SpecialOfferProducts");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_TransactionHistories(TransactionHistory entity)
		{
			this.SendPropertyChanging("TransactionHistories");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_TransactionHistories(TransactionHistory entity)
		{
			this.SendPropertyChanging("TransactionHistories");
			entity.Product = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging("WorkOrders");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging("WorkOrders");
			entity.Product = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the Class field. Mapped on target field 'Class'. </summary>
		public System.String Class
		{
			get	{ return _class; }
			set
			{
				if((_class != value))
				{
					OnClassChanging(value);
					SendPropertyChanging("Class");
					_class = value;
					SendPropertyChanged("Class");
					OnClassChanged();
				}
			}
		}

		/// <summary>Gets or sets the Color field. Mapped on target field 'Color'. </summary>
		public System.String Color
		{
			get	{ return _color; }
			set
			{
				if((_color != value))
				{
					OnColorChanging(value);
					SendPropertyChanging("Color");
					_color = value;
					SendPropertyChanged("Color");
					OnColorChanged();
				}
			}
		}

		/// <summary>Gets or sets the DaysToManufacture field. Mapped on target field 'DaysToManufacture'. </summary>
		public System.Int32 DaysToManufacture
		{
			get	{ return _daysToManufacture; }
			set
			{
				if((_daysToManufacture != value))
				{
					OnDaysToManufactureChanging(value);
					SendPropertyChanging("DaysToManufacture");
					_daysToManufacture = value;
					SendPropertyChanged("DaysToManufacture");
					OnDaysToManufactureChanged();
				}
			}
		}

		/// <summary>Gets or sets the DiscontinuedDate field. Mapped on target field 'DiscontinuedDate'. </summary>
		public Nullable<System.DateTime> DiscontinuedDate
		{
			get	{ return _discontinuedDate; }
			set
			{
				if((_discontinuedDate != value))
				{
					OnDiscontinuedDateChanging(value);
					SendPropertyChanging("DiscontinuedDate");
					_discontinuedDate = value;
					SendPropertyChanged("DiscontinuedDate");
					OnDiscontinuedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the FinishedGoodsFlag field. Mapped on target field 'FinishedGoodsFlag'. </summary>
		public System.Boolean FinishedGoodsFlag
		{
			get	{ return _finishedGoodsFlag; }
			set
			{
				if((_finishedGoodsFlag != value))
				{
					OnFinishedGoodsFlagChanging(value);
					SendPropertyChanging("FinishedGoodsFlag");
					_finishedGoodsFlag = value;
					SendPropertyChanged("FinishedGoodsFlag");
					OnFinishedGoodsFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the ListPrice field. Mapped on target field 'ListPrice'. </summary>
		public System.Decimal ListPrice
		{
			get	{ return _listPrice; }
			set
			{
				if((_listPrice != value))
				{
					OnListPriceChanging(value);
					SendPropertyChanging("ListPrice");
					_listPrice = value;
					SendPropertyChanged("ListPrice");
					OnListPriceChanged();
				}
			}
		}

		/// <summary>Gets or sets the MakeFlag field. Mapped on target field 'MakeFlag'. </summary>
		public System.Boolean MakeFlag
		{
			get	{ return _makeFlag; }
			set
			{
				if((_makeFlag != value))
				{
					OnMakeFlagChanging(value);
					SendPropertyChanging("MakeFlag");
					_makeFlag = value;
					SendPropertyChanged("MakeFlag");
					OnMakeFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Int32 ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductLine field. Mapped on target field 'ProductLine'. </summary>
		public System.String ProductLine
		{
			get	{ return _productLine; }
			set
			{
				if((_productLine != value))
				{
					OnProductLineChanging(value);
					SendPropertyChanging("ProductLine");
					_productLine = value;
					SendPropertyChanged("ProductLine");
					OnProductLineChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductModelId field. Mapped on target field 'ProductModelID'. </summary>
		public Nullable<System.Int32> ProductModelId
		{
			get	{ return _productModelId; }
			set
			{
				if((_productModelId != value))
				{
					if(_productModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductModelIdChanging(value);
					SendPropertyChanging("ProductModelId");
					_productModelId = value;
					SendPropertyChanged("ProductModelId");
					OnProductModelIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductNumber field. Mapped on target field 'ProductNumber'. </summary>
		public System.String ProductNumber
		{
			get	{ return _productNumber; }
			set
			{
				if((_productNumber != value))
				{
					OnProductNumberChanging(value);
					SendPropertyChanging("ProductNumber");
					_productNumber = value;
					SendPropertyChanged("ProductNumber");
					OnProductNumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductSubcategoryId field. Mapped on target field 'ProductSubcategoryID'. </summary>
		public Nullable<System.Int32> ProductSubcategoryId
		{
			get	{ return _productSubcategoryId; }
			set
			{
				if((_productSubcategoryId != value))
				{
					if(_productSubcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductSubcategoryIdChanging(value);
					SendPropertyChanging("ProductSubcategoryId");
					_productSubcategoryId = value;
					SendPropertyChanged("ProductSubcategoryId");
					OnProductSubcategoryIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ReorderPoint field. Mapped on target field 'ReorderPoint'. </summary>
		public System.Int16 ReorderPoint
		{
			get	{ return _reorderPoint; }
			set
			{
				if((_reorderPoint != value))
				{
					OnReorderPointChanging(value);
					SendPropertyChanging("ReorderPoint");
					_reorderPoint = value;
					SendPropertyChanged("ReorderPoint");
					OnReorderPointChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SafetyStockLevel field. Mapped on target field 'SafetyStockLevel'. </summary>
		public System.Int16 SafetyStockLevel
		{
			get	{ return _safetyStockLevel; }
			set
			{
				if((_safetyStockLevel != value))
				{
					OnSafetyStockLevelChanging(value);
					SendPropertyChanging("SafetyStockLevel");
					_safetyStockLevel = value;
					SendPropertyChanged("SafetyStockLevel");
					OnSafetyStockLevelChanged();
				}
			}
		}

		/// <summary>Gets or sets the SellEndDate field. Mapped on target field 'SellEndDate'. </summary>
		public Nullable<System.DateTime> SellEndDate
		{
			get	{ return _sellEndDate; }
			set
			{
				if((_sellEndDate != value))
				{
					OnSellEndDateChanging(value);
					SendPropertyChanging("SellEndDate");
					_sellEndDate = value;
					SendPropertyChanged("SellEndDate");
					OnSellEndDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the SellStartDate field. Mapped on target field 'SellStartDate'. </summary>
		public System.DateTime SellStartDate
		{
			get	{ return _sellStartDate; }
			set
			{
				if((_sellStartDate != value))
				{
					OnSellStartDateChanging(value);
					SendPropertyChanging("SellStartDate");
					_sellStartDate = value;
					SendPropertyChanged("SellStartDate");
					OnSellStartDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Size field. Mapped on target field 'Size'. </summary>
		public System.String Size
		{
			get	{ return _size; }
			set
			{
				if((_size != value))
				{
					OnSizeChanging(value);
					SendPropertyChanging("Size");
					_size = value;
					SendPropertyChanged("Size");
					OnSizeChanged();
				}
			}
		}

		/// <summary>Gets or sets the SizeUnitMeasureCode field. Mapped on target field 'SizeUnitMeasureCode'. </summary>
		public System.String SizeUnitMeasureCode
		{
			get	{ return _sizeUnitMeasureCode; }
			set
			{
				if((_sizeUnitMeasureCode != value))
				{
					if(_unitMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSizeUnitMeasureCodeChanging(value);
					SendPropertyChanging("SizeUnitMeasureCode");
					_sizeUnitMeasureCode = value;
					SendPropertyChanged("SizeUnitMeasureCode");
					OnSizeUnitMeasureCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the StandardCost field. Mapped on target field 'StandardCost'. </summary>
		public System.Decimal StandardCost
		{
			get	{ return _standardCost; }
			set
			{
				if((_standardCost != value))
				{
					OnStandardCostChanging(value);
					SendPropertyChanging("StandardCost");
					_standardCost = value;
					SendPropertyChanged("StandardCost");
					OnStandardCostChanged();
				}
			}
		}

		/// <summary>Gets or sets the Style field. Mapped on target field 'Style'. </summary>
		public System.String Style
		{
			get	{ return _style; }
			set
			{
				if((_style != value))
				{
					OnStyleChanging(value);
					SendPropertyChanging("Style");
					_style = value;
					SendPropertyChanged("Style");
					OnStyleChanged();
				}
			}
		}

		/// <summary>Gets or sets the Weight field. Mapped on target field 'Weight'. </summary>
		public Nullable<System.Decimal> Weight
		{
			get	{ return _weight; }
			set
			{
				if((_weight != value))
				{
					OnWeightChanging(value);
					SendPropertyChanging("Weight");
					_weight = value;
					SendPropertyChanged("Weight");
					OnWeightChanged();
				}
			}
		}

		/// <summary>Gets or sets the WeightUnitMeasureCode field. Mapped on target field 'WeightUnitMeasureCode'. </summary>
		public System.String WeightUnitMeasureCode
		{
			get	{ return _weightUnitMeasureCode; }
			set
			{
				if((_weightUnitMeasureCode != value))
				{
					if(_unitMeasure1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnWeightUnitMeasureCodeChanging(value);
					SendPropertyChanging("WeightUnitMeasureCode");
					_weightUnitMeasureCode = value;
					SendPropertyChanged("WeightUnitMeasureCode");
					OnWeightUnitMeasureCodeChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'BillOfMaterial.Product - Product.BillOfMaterials (m:1)'</summary>
		public EntitySet<BillOfMaterial> BillOfMaterials
		{
			get { return this._billOfMaterials; }
			set { this._billOfMaterials.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'BillOfMaterial.Product1 - Product.BillOfMaterials1 (m:1)'</summary>
		public EntitySet<BillOfMaterial> BillOfMaterials1
		{
			get { return this._billOfMaterials1; }
			set { this._billOfMaterials1.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductCostHistory.Product - Product.ProductCostHistories (m:1)'</summary>
		public EntitySet<ProductCostHistory> ProductCostHistories
		{
			get { return this._productCostHistories; }
			set { this._productCostHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductDocument.Product - Product.ProductDocuments (m:1)'</summary>
		public EntitySet<ProductDocument> ProductDocuments
		{
			get { return this._productDocuments; }
			set { this._productDocuments.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductInventory.Product - Product.ProductInventories (m:1)'</summary>
		public EntitySet<ProductInventory> ProductInventories
		{
			get { return this._productInventories; }
			set { this._productInventories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductListPriceHistory.Product - Product.ProductListPriceHistories (m:1)'</summary>
		public EntitySet<ProductListPriceHistory> ProductListPriceHistories
		{
			get { return this._productListPriceHistories; }
			set { this._productListPriceHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.ProductModel - ProductModel.Products (m:1)'</summary>
		public ProductModel ProductModel
		{
			get { return _productModel.Entity; }
			set
			{
				ProductModel previousValue = _productModel.Entity;
				if((previousValue != value) || (_productModel.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("ProductModel");
					if(previousValue != null)
					{
						_productModel.Entity = null;
						previousValue.Products.Remove(this);
					}
					_productModel.Entity = value;
					if(value == null)
					{
						_productModelId = default(Nullable<System.Int32>);
					}
					else
					{
						value.Products.Add(this);
						_productModelId = value.ProductModelId;
					}
					this.SendPropertyChanged("ProductModel");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductProductPhoto.Product - Product.ProductProductPhotos (m:1)'</summary>
		public EntitySet<ProductProductPhoto> ProductProductPhotos
		{
			get { return this._productProductPhotos; }
			set { this._productProductPhotos.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductReview.Product - Product.ProductReviews (m:1)'</summary>
		public EntitySet<ProductReview> ProductReviews
		{
			get { return this._productReviews; }
			set { this._productReviews.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.ProductSubcategory - ProductSubcategory.Products (m:1)'</summary>
		public ProductSubcategory ProductSubcategory
		{
			get { return _productSubcategory.Entity; }
			set
			{
				ProductSubcategory previousValue = _productSubcategory.Entity;
				if((previousValue != value) || (_productSubcategory.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("ProductSubcategory");
					if(previousValue != null)
					{
						_productSubcategory.Entity = null;
						previousValue.Products.Remove(this);
					}
					_productSubcategory.Entity = value;
					if(value == null)
					{
						_productSubcategoryId = default(Nullable<System.Int32>);
					}
					else
					{
						value.Products.Add(this);
						_productSubcategoryId = value.ProductSubcategoryId;
					}
					this.SendPropertyChanged("ProductSubcategory");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductVendor.Product - Product.ProductVendors (m:1)'</summary>
		public EntitySet<ProductVendor> ProductVendors
		{
			get { return this._productVendors; }
			set { this._productVendors.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PurchaseOrderDetail.Product - Product.PurchaseOrderDetails (m:1)'</summary>
		public EntitySet<PurchaseOrderDetail> PurchaseOrderDetails
		{
			get { return this._purchaseOrderDetails; }
			set { this._purchaseOrderDetails.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ShoppingCartItem.Product - Product.ShoppingCartItems (m:1)'</summary>
		public EntitySet<ShoppingCartItem> ShoppingCartItems
		{
			get { return this._shoppingCartItems; }
			set { this._shoppingCartItems.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SpecialOfferProduct.Product - Product.SpecialOfferProducts (m:1)'</summary>
		public EntitySet<SpecialOfferProduct> SpecialOfferProducts
		{
			get { return this._specialOfferProducts; }
			set { this._specialOfferProducts.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'TransactionHistory.Product - Product.TransactionHistories (m:1)'</summary>
		public EntitySet<TransactionHistory> TransactionHistories
		{
			get { return this._transactionHistories; }
			set { this._transactionHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.UnitMeasure - UnitMeasure.Products (m:1)'</summary>
		public UnitMeasure UnitMeasure
		{
			get { return _unitMeasure.Entity; }
			set
			{
				UnitMeasure previousValue = _unitMeasure.Entity;
				if((previousValue != value) || (_unitMeasure.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("UnitMeasure");
					if(previousValue != null)
					{
						_unitMeasure.Entity = null;
						previousValue.Products.Remove(this);
					}
					_unitMeasure.Entity = value;
					if(value == null)
					{
						_sizeUnitMeasureCode = default(System.String);
					}
					else
					{
						value.Products.Add(this);
						_sizeUnitMeasureCode = value.UnitMeasureCode;
					}
					this.SendPropertyChanged("UnitMeasure");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.UnitMeasure1 - UnitMeasure.Products1 (m:1)'</summary>
		public UnitMeasure UnitMeasure1
		{
			get { return _unitMeasure1.Entity; }
			set
			{
				UnitMeasure previousValue = _unitMeasure1.Entity;
				if((previousValue != value) || (_unitMeasure1.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("UnitMeasure1");
					if(previousValue != null)
					{
						_unitMeasure1.Entity = null;
						previousValue.Products1.Remove(this);
					}
					_unitMeasure1.Entity = value;
					if(value == null)
					{
						_weightUnitMeasureCode = default(System.String);
					}
					else
					{
						value.Products1.Add(this);
						_weightUnitMeasureCode = value.UnitMeasureCode;
					}
					this.SendPropertyChanged("UnitMeasure1");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'WorkOrder.Product - Product.WorkOrders (m:1)'</summary>
		public EntitySet<WorkOrder> WorkOrders
		{
			get { return this._workOrders; }
			set { this._workOrders.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649