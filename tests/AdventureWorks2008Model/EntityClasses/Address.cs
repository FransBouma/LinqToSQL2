#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'Address', mapped on table 'AdventureWorks.Person.Address'.</summary>
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_addressLine1;
		private System.String	_addressLine2;
		private System.String	_city;
		private System.Int32	_id;
		private System.DateTime	_modifiedDate;
		private System.String	_postalCode;
		private System.Guid	_rowguid;
		private Microsoft.SqlServer.Types.SqlGeography	_spatialLocation;
		private System.Int32	_stateProvinceId;
		private EntitySet <BusinessEntityAddress> _businessEntityAddresses;
		private EntitySet <SalesOrderHeader> _salesOrderHeaders;
		private EntitySet <SalesOrderHeader> _salesOrderHeaders1;
		private EntityRef <StateProvince> _stateProvince;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAddressLine1Changing(System.String value);
		partial void OnAddressLine1Changed();
		partial void OnAddressLine2Changing(System.String value);
		partial void OnAddressLine2Changed();
		partial void OnCityChanging(System.String value);
		partial void OnCityChanged();
		partial void OnIdChanging(System.Int32 value);
		partial void OnIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnPostalCodeChanging(System.String value);
		partial void OnPostalCodeChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSpatialLocationChanging(Microsoft.SqlServer.Types.SqlGeography value);
		partial void OnSpatialLocationChanged();
		partial void OnStateProvinceIdChanging(System.Int32 value);
		partial void OnStateProvinceIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Address"/> class.</summary>
		public Address()
		{
			_businessEntityAddresses = new EntitySet<BusinessEntityAddress>(new Action<BusinessEntityAddress>(this.Attach_BusinessEntityAddresses), new Action<BusinessEntityAddress>(this.Detach_BusinessEntityAddresses) );
			_salesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.Attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.Detach_SalesOrderHeaders) );
			_salesOrderHeaders1 = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.Attach_SalesOrderHeaders1), new Action<SalesOrderHeader>(this.Detach_SalesOrderHeaders1) );
			_stateProvince = default(EntityRef<StateProvince>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging("BusinessEntityAddresses");
			entity.Address = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BusinessEntityAddresses(BusinessEntityAddress entity)
		{
			this.SendPropertyChanging("BusinessEntityAddresses");
			entity.Address = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.Address = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.Address = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaders1(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders1");
			entity.Address1 = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaders1(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders1");
			entity.Address1 = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AddressLine1 field. Mapped on target field 'AddressLine1'. </summary>
		public System.String AddressLine1
		{
			get	{ return _addressLine1; }
			set
			{
				if((_addressLine1 != value))
				{
					OnAddressLine1Changing(value);
					SendPropertyChanging("AddressLine1");
					_addressLine1 = value;
					SendPropertyChanged("AddressLine1");
					OnAddressLine1Changed();
				}
			}
		}

		/// <summary>Gets or sets the AddressLine2 field. Mapped on target field 'AddressLine2'. </summary>
		public System.String AddressLine2
		{
			get	{ return _addressLine2; }
			set
			{
				if((_addressLine2 != value))
				{
					OnAddressLine2Changing(value);
					SendPropertyChanging("AddressLine2");
					_addressLine2 = value;
					SendPropertyChanged("AddressLine2");
					OnAddressLine2Changed();
				}
			}
		}

		/// <summary>Gets or sets the City field. Mapped on target field 'City'. </summary>
		public System.String City
		{
			get	{ return _city; }
			set
			{
				if((_city != value))
				{
					OnCityChanging(value);
					SendPropertyChanging("City");
					_city = value;
					SendPropertyChanged("City");
					OnCityChanged();
				}
			}
		}

		/// <summary>Gets or sets the Id field. Mapped on target field 'AddressID'. </summary>
		public System.Int32 Id
		{
			get	{ return _id; }
			set
			{
				if((_id != value))
				{
					OnIdChanging(value);
					SendPropertyChanging("Id");
					_id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the PostalCode field. Mapped on target field 'PostalCode'. </summary>
		public System.String PostalCode
		{
			get	{ return _postalCode; }
			set
			{
				if((_postalCode != value))
				{
					OnPostalCodeChanging(value);
					SendPropertyChanging("PostalCode");
					_postalCode = value;
					SendPropertyChanged("PostalCode");
					OnPostalCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SpatialLocation field. Mapped on target field 'SpatialLocation'. </summary>
		public Microsoft.SqlServer.Types.SqlGeography SpatialLocation
		{
			get	{ return _spatialLocation; }
			set
			{
				if((_spatialLocation != value))
				{
					OnSpatialLocationChanging(value);
					SendPropertyChanging("SpatialLocation");
					_spatialLocation = value;
					SendPropertyChanged("SpatialLocation");
					OnSpatialLocationChanged();
				}
			}
		}

		/// <summary>Gets or sets the StateProvinceId field. Mapped on target field 'StateProvinceID'. </summary>
		public System.Int32 StateProvinceId
		{
			get	{ return _stateProvinceId; }
			set
			{
				if((_stateProvinceId != value))
				{
					if(_stateProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnStateProvinceIdChanging(value);
					SendPropertyChanging("StateProvinceId");
					_stateProvinceId = value;
					SendPropertyChanged("StateProvinceId");
					OnStateProvinceIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'BusinessEntityAddress.Address - Address.BusinessEntityAddresses (m:1)'</summary>
		public EntitySet<BusinessEntityAddress> BusinessEntityAddresses
		{
			get { return this._businessEntityAddresses; }
			set { this._businessEntityAddresses.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Address - Address.SalesOrderHeaders (m:1)'</summary>
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get { return this._salesOrderHeaders; }
			set { this._salesOrderHeaders.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Address1 - Address.SalesOrderHeaders1 (m:1)'</summary>
		public EntitySet<SalesOrderHeader> SalesOrderHeaders1
		{
			get { return this._salesOrderHeaders1; }
			set { this._salesOrderHeaders1.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Address.StateProvince - StateProvince.Addresses (m:1)'</summary>
		public StateProvince StateProvince
		{
			get { return _stateProvince.Entity; }
			set
			{
				StateProvince previousValue = _stateProvince.Entity;
				if((previousValue != value) || (_stateProvince.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("StateProvince");
					if(previousValue != null)
					{
						_stateProvince.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					_stateProvince.Entity = value;
					if(value == null)
					{
						_stateProvinceId = default(System.Int32);
					}
					else
					{
						value.Addresses.Add(this);
						_stateProvinceId = value.StateProvinceId;
					}
					this.SendPropertyChanged("StateProvince");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649