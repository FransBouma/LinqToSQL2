#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'CurrencyRate', mapped on table 'AdventureWorks.Sales.CurrencyRate'.</summary>
	public partial class CurrencyRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Decimal	_averageRate;
		private System.DateTime	_currencyRateDate;
		private System.Int32	_currencyRateId;
		private System.Decimal	_endOfDayRate;
		private System.String	_fromCurrencyCode;
		private System.DateTime	_modifiedDate;
		private System.String	_toCurrencyCode;
		private EntityRef <Currency> _currency;
		private EntityRef <Currency> _currency1;
		private EntitySet <SalesOrderHeader> _salesOrderHeaders;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAverageRateChanging(System.Decimal value);
		partial void OnAverageRateChanged();
		partial void OnCurrencyRateDateChanging(System.DateTime value);
		partial void OnCurrencyRateDateChanged();
		partial void OnCurrencyRateIdChanging(System.Int32 value);
		partial void OnCurrencyRateIdChanged();
		partial void OnEndOfDayRateChanging(System.Decimal value);
		partial void OnEndOfDayRateChanged();
		partial void OnFromCurrencyCodeChanging(System.String value);
		partial void OnFromCurrencyCodeChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnToCurrencyCodeChanging(System.String value);
		partial void OnToCurrencyCodeChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="CurrencyRate"/> class.</summary>
		public CurrencyRate()
		{
			_currency = default(EntityRef<Currency>);
			_currency1 = default(EntityRef<Currency>);
			_salesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.Attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.Detach_SalesOrderHeaders) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.CurrencyRate = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.CurrencyRate = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AverageRate field. Mapped on target field 'AverageRate'. </summary>
		public System.Decimal AverageRate
		{
			get	{ return _averageRate; }
			set
			{
				if((_averageRate != value))
				{
					OnAverageRateChanging(value);
					SendPropertyChanging("AverageRate");
					_averageRate = value;
					SendPropertyChanged("AverageRate");
					OnAverageRateChanged();
				}
			}
		}

		/// <summary>Gets or sets the CurrencyRateDate field. Mapped on target field 'CurrencyRateDate'. </summary>
		public System.DateTime CurrencyRateDate
		{
			get	{ return _currencyRateDate; }
			set
			{
				if((_currencyRateDate != value))
				{
					OnCurrencyRateDateChanging(value);
					SendPropertyChanging("CurrencyRateDate");
					_currencyRateDate = value;
					SendPropertyChanged("CurrencyRateDate");
					OnCurrencyRateDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the CurrencyRateId field. Mapped on target field 'CurrencyRateID'. </summary>
		public System.Int32 CurrencyRateId
		{
			get	{ return _currencyRateId; }
			set
			{
				if((_currencyRateId != value))
				{
					OnCurrencyRateIdChanging(value);
					SendPropertyChanging("CurrencyRateId");
					_currencyRateId = value;
					SendPropertyChanged("CurrencyRateId");
					OnCurrencyRateIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the EndOfDayRate field. Mapped on target field 'EndOfDayRate'. </summary>
		public System.Decimal EndOfDayRate
		{
			get	{ return _endOfDayRate; }
			set
			{
				if((_endOfDayRate != value))
				{
					OnEndOfDayRateChanging(value);
					SendPropertyChanging("EndOfDayRate");
					_endOfDayRate = value;
					SendPropertyChanged("EndOfDayRate");
					OnEndOfDayRateChanged();
				}
			}
		}

		/// <summary>Gets or sets the FromCurrencyCode field. Mapped on target field 'FromCurrencyCode'. </summary>
		public System.String FromCurrencyCode
		{
			get	{ return _fromCurrencyCode; }
			set
			{
				if((_fromCurrencyCode != value))
				{
					if(_currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnFromCurrencyCodeChanging(value);
					SendPropertyChanging("FromCurrencyCode");
					_fromCurrencyCode = value;
					SendPropertyChanged("FromCurrencyCode");
					OnFromCurrencyCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ToCurrencyCode field. Mapped on target field 'ToCurrencyCode'. </summary>
		public System.String ToCurrencyCode
		{
			get	{ return _toCurrencyCode; }
			set
			{
				if((_toCurrencyCode != value))
				{
					if(_currency1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnToCurrencyCodeChanging(value);
					SendPropertyChanging("ToCurrencyCode");
					_toCurrencyCode = value;
					SendPropertyChanged("ToCurrencyCode");
					OnToCurrencyCodeChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'CurrencyRate.Currency - Currency.CurrencyRates (m:1)'</summary>
		public Currency Currency
		{
			get { return _currency.Entity; }
			set
			{
				Currency previousValue = _currency.Entity;
				if((previousValue != value) || (_currency.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Currency");
					if(previousValue != null)
					{
						_currency.Entity = null;
						previousValue.CurrencyRates.Remove(this);
					}
					_currency.Entity = value;
					if(value == null)
					{
						_fromCurrencyCode = default(System.String);
					}
					else
					{
						value.CurrencyRates.Add(this);
						_fromCurrencyCode = value.CurrencyCode;
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'CurrencyRate.Currency1 - Currency.CurrencyRates1 (m:1)'</summary>
		public Currency Currency1
		{
			get { return _currency1.Entity; }
			set
			{
				Currency previousValue = _currency1.Entity;
				if((previousValue != value) || (_currency1.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Currency1");
					if(previousValue != null)
					{
						_currency1.Entity = null;
						previousValue.CurrencyRates1.Remove(this);
					}
					_currency1.Entity = value;
					if(value == null)
					{
						_toCurrencyCode = default(System.String);
					}
					else
					{
						value.CurrencyRates1.Add(this);
						_toCurrencyCode = value.CurrencyCode;
					}
					this.SendPropertyChanged("Currency1");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.CurrencyRate - CurrencyRate.SalesOrderHeaders (m:1)'</summary>
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get { return this._salesOrderHeaders; }
			set { this._salesOrderHeaders.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649