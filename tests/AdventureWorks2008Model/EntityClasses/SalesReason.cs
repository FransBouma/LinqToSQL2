#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace ReadTestsAdventureWorks2008.EntityClasses
{
	/// <summary>Class which represents the entity 'SalesReason', mapped on table 'AdventureWorks.Sales.SalesReason'.</summary>
	public partial class SalesReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private System.String	_reasonType;
		private System.Int32	_salesReasonId;
		private EntitySet <SalesOrderHeaderSalesReason> _salesOrderHeaderSalesReasons;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		partial void OnReasonTypeChanging(System.String value);
		partial void OnReasonTypeChanged();
		partial void OnSalesReasonIdChanging(System.Int32 value);
		partial void OnSalesReasonIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SalesReason"/> class.</summary>
		public SalesReason()
		{
			_salesOrderHeaderSalesReasons = new EntitySet<SalesOrderHeaderSalesReason>(new Action<SalesOrderHeaderSalesReason>(this.Attach_SalesOrderHeaderSalesReasons), new Action<SalesOrderHeaderSalesReason>(this.Detach_SalesOrderHeaderSalesReasons) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaderSalesReasons(SalesOrderHeaderSalesReason entity)
		{
			this.SendPropertyChanging("SalesOrderHeaderSalesReasons");
			entity.SalesReason = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaderSalesReasons(SalesOrderHeaderSalesReason entity)
		{
			this.SendPropertyChanging("SalesOrderHeaderSalesReasons");
			entity.SalesReason = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ReasonType field. Mapped on target field 'ReasonType'. </summary>
		public System.String ReasonType
		{
			get	{ return _reasonType; }
			set
			{
				if((_reasonType != value))
				{
					OnReasonTypeChanging(value);
					SendPropertyChanging("ReasonType");
					_reasonType = value;
					SendPropertyChanged("ReasonType");
					OnReasonTypeChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesReasonId field. Mapped on target field 'SalesReasonID'. </summary>
		public System.Int32 SalesReasonId
		{
			get	{ return _salesReasonId; }
			set
			{
				if((_salesReasonId != value))
				{
					OnSalesReasonIdChanging(value);
					SendPropertyChanging("SalesReasonId");
					_salesReasonId = value;
					SendPropertyChanged("SalesReasonId");
					OnSalesReasonIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeaderSalesReason.SalesReason - SalesReason.SalesOrderHeaderSalesReasons (m:1)'</summary>
		public EntitySet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons
		{
			get { return this._salesOrderHeaderSalesReasons; }
			set { this._salesOrderHeaderSalesReasons.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649