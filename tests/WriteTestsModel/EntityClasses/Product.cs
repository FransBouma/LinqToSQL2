#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'Product', mapped on table 'LLBLGenProUnitTest.dbo.Product'.</summary>
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_fullDescription;
		private Nullable<System.Decimal>	_price;
		private System.Guid	_productId;
		private System.String	_shortDescription;
		private System.Guid	_testRunId;
		private EntitySet <OrderRow> _orderRows;
		private EntityRef <SpecialProduct> _specialProduct;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFullDescriptionChanging(System.String value);
		partial void OnFullDescriptionChanged();
		partial void OnPriceChanging(Nullable<System.Decimal> value);
		partial void OnPriceChanged();
		partial void OnProductIdChanging(System.Guid value);
		partial void OnProductIdChanged();
		partial void OnShortDescriptionChanging(System.String value);
		partial void OnShortDescriptionChanged();
		partial void OnTestRunIdChanging(System.Guid value);
		partial void OnTestRunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Product"/> class.</summary>
		public Product()
		{
			_orderRows = new EntitySet<OrderRow>(new Action<OrderRow>(this.Attach_OrderRows), new Action<OrderRow>(this.Detach_OrderRows) );
			_specialProduct = default(EntityRef<SpecialProduct>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_OrderRows(OrderRow entity)
		{
			this.SendPropertyChanging("OrderRows");
			entity.Product = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_OrderRows(OrderRow entity)
		{
			this.SendPropertyChanging("OrderRows");
			entity.Product = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the FullDescription field. Mapped on target field 'FullDescription'. </summary>
		public System.String FullDescription
		{
			get	{ return _fullDescription; }
			set
			{
				if((_fullDescription != value))
				{
					OnFullDescriptionChanging(value);
					SendPropertyChanging("FullDescription");
					_fullDescription = value;
					SendPropertyChanged("FullDescription");
					OnFullDescriptionChanged();
				}
			}
		}

		/// <summary>Gets or sets the Price field. Mapped on target field 'Price'. </summary>
		public Nullable<System.Decimal> Price
		{
			get	{ return _price; }
			set
			{
				if((_price != value))
				{
					OnPriceChanging(value);
					SendPropertyChanging("Price");
					_price = value;
					SendPropertyChanged("Price");
					OnPriceChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Guid ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ShortDescription field. Mapped on target field 'ShortDescription'. </summary>
		public System.String ShortDescription
		{
			get	{ return _shortDescription; }
			set
			{
				if((_shortDescription != value))
				{
					OnShortDescriptionChanging(value);
					SendPropertyChanging("ShortDescription");
					_shortDescription = value;
					SendPropertyChanged("ShortDescription");
					OnShortDescriptionChanged();
				}
			}
		}

		/// <summary>Gets or sets the TestRunId field. Mapped on target field 'TestRunID'. </summary>
		public System.Guid TestRunId
		{
			get	{ return _testRunId; }
			set
			{
				if((_testRunId != value))
				{
					OnTestRunIdChanging(value);
					SendPropertyChanging("TestRunId");
					_testRunId = value;
					SendPropertyChanged("TestRunId");
					OnTestRunIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'OrderRow.Product - Product.OrderRows (m:1)'</summary>
		public EntitySet<OrderRow> OrderRows
		{
			get { return this._orderRows; }
			set { this._orderRows.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SpecialProduct.Product - Product.SpecialProduct (1:1)'</summary>
		public SpecialProduct SpecialProduct
		{
			get { return _specialProduct.Entity; }
			set
			{
				SpecialProduct previousValue = _specialProduct.Entity;
				if((previousValue != value) || (_specialProduct.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SpecialProduct");
					if(previousValue != null)
					{
						_specialProduct.Entity = null;
						previousValue.Product=null;
					}
					_specialProduct.Entity = value;
					if(value != null)
					{
						value.Product = this;
					}
					this.SendPropertyChanged("SpecialProduct");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649