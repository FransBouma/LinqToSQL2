#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'Company', mapped on table 'LLBLGenProUnitTest.dbo.Company'.</summary>
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Data.Linq.Binary	_companyId;
		private System.String	_companyName;
		private System.Guid	_testrunId;
		private EntitySet <CompanyProperty> _companyProperty;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCompanyIdChanging(System.Data.Linq.Binary value);
		partial void OnCompanyIdChanged();
		partial void OnCompanyNameChanging(System.String value);
		partial void OnCompanyNameChanged();
		partial void OnTestrunIdChanging(System.Guid value);
		partial void OnTestrunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Company"/> class.</summary>
		public Company()
		{
			_companyProperty = new EntitySet<CompanyProperty>(new Action<CompanyProperty>(this.Attach_CompanyProperty), new Action<CompanyProperty>(this.Detach_CompanyProperty) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_CompanyProperty(CompanyProperty entity)
		{
			this.SendPropertyChanging("CompanyProperty");
			entity.Company = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_CompanyProperty(CompanyProperty entity)
		{
			this.SendPropertyChanging("CompanyProperty");
			entity.Company = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the CompanyId field. Mapped on target field 'CompanyID'. </summary>
		public System.Data.Linq.Binary CompanyId
		{
			get	{ return _companyId; }
			set
			{
				if((_companyId != value))
				{
					OnCompanyIdChanging(value);
					SendPropertyChanging("CompanyId");
					_companyId = value;
					SendPropertyChanged("CompanyId");
					OnCompanyIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CompanyName field. Mapped on target field 'CompanyName'. </summary>
		public System.String CompanyName
		{
			get	{ return _companyName; }
			set
			{
				if((_companyName != value))
				{
					OnCompanyNameChanging(value);
					SendPropertyChanging("CompanyName");
					_companyName = value;
					SendPropertyChanged("CompanyName");
					OnCompanyNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the TestrunId field. Mapped on target field 'TestrunID'. </summary>
		public System.Guid TestrunId
		{
			get	{ return _testrunId; }
			set
			{
				if((_testrunId != value))
				{
					OnTestrunIdChanging(value);
					SendPropertyChanging("TestrunId");
					_testrunId = value;
					SendPropertyChanged("TestrunId");
					OnTestrunIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'CompanyProperty.Company - Company.CompanyProperty (m:1)'</summary>
		public EntitySet<CompanyProperty> CompanyProperty
		{
			get { return this._companyProperty; }
			set { this._companyProperty.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649