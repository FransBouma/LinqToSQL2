#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'CompanyProperty', mapped on table 'LLBLGenProUnitTest.dbo.CompanyProperty'.</summary>
	public partial class CompanyProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Data.Linq.Binary	_companyId;
		private System.Data.Linq.Binary	_propertyId;
		private System.String	_propertyValue;
		private System.Guid	_testrunId;
		private EntityRef <Company> _company;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCompanyIdChanging(System.Data.Linq.Binary value);
		partial void OnCompanyIdChanged();
		partial void OnPropertyIdChanging(System.Data.Linq.Binary value);
		partial void OnPropertyIdChanged();
		partial void OnPropertyValueChanging(System.String value);
		partial void OnPropertyValueChanged();
		partial void OnTestrunIdChanging(System.Guid value);
		partial void OnTestrunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="CompanyProperty"/> class.</summary>
		public CompanyProperty()
		{
			_company = default(EntityRef<Company>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the CompanyId field. Mapped on target field 'CompanyID'. </summary>
		public System.Data.Linq.Binary CompanyId
		{
			get	{ return _companyId; }
			set
			{
				if((_companyId != value))
				{
					if(_company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCompanyIdChanging(value);
					SendPropertyChanging("CompanyId");
					_companyId = value;
					SendPropertyChanged("CompanyId");
					OnCompanyIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the PropertyId field. Mapped on target field 'PropertyID'. </summary>
		public System.Data.Linq.Binary PropertyId
		{
			get	{ return _propertyId; }
			set
			{
				if((_propertyId != value))
				{
					OnPropertyIdChanging(value);
					SendPropertyChanging("PropertyId");
					_propertyId = value;
					SendPropertyChanged("PropertyId");
					OnPropertyIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the PropertyValue field. Mapped on target field 'PropertyValue'. </summary>
		public System.String PropertyValue
		{
			get	{ return _propertyValue; }
			set
			{
				if((_propertyValue != value))
				{
					OnPropertyValueChanging(value);
					SendPropertyChanging("PropertyValue");
					_propertyValue = value;
					SendPropertyChanged("PropertyValue");
					OnPropertyValueChanged();
				}
			}
		}

		/// <summary>Gets or sets the TestrunId field. Mapped on target field 'TestrunID'. </summary>
		public System.Guid TestrunId
		{
			get	{ return _testrunId; }
			set
			{
				if((_testrunId != value))
				{
					OnTestrunIdChanging(value);
					SendPropertyChanging("TestrunId");
					_testrunId = value;
					SendPropertyChanged("TestrunId");
					OnTestrunIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'CompanyProperty.Company - Company.CompanyProperty (m:1)'</summary>
		public Company Company
		{
			get { return _company.Entity; }
			set
			{
				Company previousValue = _company.Entity;
				if((previousValue != value) || (_company.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Company");
					if(previousValue != null)
					{
						_company.Entity = null;
						previousValue.CompanyProperty.Remove(this);
					}
					_company.Entity = value;
					if(value == null)
					{
						_companyId = default(System.Data.Linq.Binary);
					}
					else
					{
						value.CompanyProperty.Add(this);
						_companyId = value.CompanyId;
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649