#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'GuidTpehTester', mapped on table 'LLBLGenProUnitTest.dbo.GuidTPEHTester'.</summary>
	public partial class GuidTpehTester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Guid	_id;
		private System.Int32	_itemType;
		private System.Guid	_testrunId;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnIdChanging(System.Guid value);
		partial void OnIdChanged();
		partial void OnItemTypeChanging(System.Int32 value);
		partial void OnItemTypeChanged();
		partial void OnTestrunIdChanging(System.Guid value);
		partial void OnTestrunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="GuidTpehTester"/> class.</summary>
		public GuidTpehTester()
		{
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the Id field. Mapped on target field 'ID'. </summary>
		public System.Guid Id
		{
			get	{ return _id; }
			set
			{
				if((_id != value))
				{
					OnIdChanging(value);
					SendPropertyChanging("Id");
					_id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ItemType field. Mapped on target field 'ItemType'. </summary>
		public System.Int32 ItemType
		{
			get	{ return _itemType; }
		}

		/// <summary>Gets or sets the TestrunId field. Mapped on target field 'TestrunID'. </summary>
		public System.Guid TestrunId
		{
			get	{ return _testrunId; }
			set
			{
				if((_testrunId != value))
				{
					OnTestrunIdChanging(value);
					SendPropertyChanging("TestrunId");
					_testrunId = value;
					SendPropertyChanged("TestrunId");
					OnTestrunIdChanged();
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 0649