#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'SpecialProduct', mapped on table 'LLBLGenProUnitTest.dbo.SpecialProduct'.</summary>
	public partial class SpecialProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_actionCode;
		private Nullable<System.DateTime>	_actionDate;
		private System.Guid	_productId;
		private System.Guid	_spTestRunId;
		private EntityRef <Product> _product;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnActionCodeChanging(System.Int32 value);
		partial void OnActionCodeChanged();
		partial void OnActionDateChanging(Nullable<System.DateTime> value);
		partial void OnActionDateChanged();
		partial void OnProductIdChanging(System.Guid value);
		partial void OnProductIdChanged();
		partial void OnSpTestRunIdChanging(System.Guid value);
		partial void OnSpTestRunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SpecialProduct"/> class.</summary>
		public SpecialProduct()
		{
			_product = default(EntityRef<Product>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the ActionCode field. Mapped on target field 'ActionCode'. </summary>
		public System.Int32 ActionCode
		{
			get	{ return _actionCode; }
			set
			{
				if((_actionCode != value))
				{
					OnActionCodeChanging(value);
					SendPropertyChanging("ActionCode");
					_actionCode = value;
					SendPropertyChanged("ActionCode");
					OnActionCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the ActionDate field. Mapped on target field 'ActionDate'. </summary>
		public Nullable<System.DateTime> ActionDate
		{
			get	{ return _actionDate; }
			set
			{
				if((_actionDate != value))
				{
					OnActionDateChanging(value);
					SendPropertyChanging("ActionDate");
					_actionDate = value;
					SendPropertyChanged("ActionDate");
					OnActionDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Guid ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					if(_product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the SpTestRunId field. Mapped on target field 'TestrunID'. </summary>
		public System.Guid SpTestRunId
		{
			get	{ return _spTestRunId; }
			set
			{
				if((_spTestRunId != value))
				{
					OnSpTestRunIdChanging(value);
					SendPropertyChanging("SpTestRunId");
					_spTestRunId = value;
					SendPropertyChanged("SpTestRunId");
					OnSpTestRunIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SpecialProduct.Product - Product.SpecialProduct (1:1)'</summary>
		public Product Product
		{
			get { return _product.Entity; }
			set
			{
				Product previousValue = _product.Entity;
				if((previousValue != value) || (_product.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Product");
					if(previousValue != null)
					{
						_product.Entity = null;
						previousValue.SpecialProduct=null;
					}
					_product.Entity = value;
					if(value==null)
					{
						_productId = default(System.Guid);
					}
					else
					{
						value.SpecialProduct = this;
						_productId = value.ProductId;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649