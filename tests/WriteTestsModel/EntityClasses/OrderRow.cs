#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'OrderRow', mapped on table 'LLBLGenProUnitTest.dbo.OrderRow'.</summary>
	public partial class OrderRow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_orderId;
		private System.Decimal	_priceInvoiced;
		private System.Guid	_productId;
		private System.Int32	_quantity;
		private System.Guid	_testRunId;
		private EntityRef <Order> _order;
		private EntityRef <Product> _product;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnOrderIdChanging(System.Int32 value);
		partial void OnOrderIdChanged();
		partial void OnPriceInvoicedChanging(System.Decimal value);
		partial void OnPriceInvoicedChanged();
		partial void OnProductIdChanging(System.Guid value);
		partial void OnProductIdChanged();
		partial void OnQuantityChanging(System.Int32 value);
		partial void OnQuantityChanged();
		partial void OnTestRunIdChanging(System.Guid value);
		partial void OnTestRunIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="OrderRow"/> class.</summary>
		public OrderRow()
		{
			_order = default(EntityRef<Order>);
			_product = default(EntityRef<Product>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the OrderId field. Mapped on target field 'OrderID'. </summary>
		public System.Int32 OrderId
		{
			get	{ return _orderId; }
			set
			{
				if((_orderId != value))
				{
					if(_order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnOrderIdChanging(value);
					SendPropertyChanging("OrderId");
					_orderId = value;
					SendPropertyChanged("OrderId");
					OnOrderIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the PriceInvoiced field. Mapped on target field 'PriceInvoiced'. </summary>
		public System.Decimal PriceInvoiced
		{
			get	{ return _priceInvoiced; }
			set
			{
				if((_priceInvoiced != value))
				{
					OnPriceInvoicedChanging(value);
					SendPropertyChanging("PriceInvoiced");
					_priceInvoiced = value;
					SendPropertyChanged("PriceInvoiced");
					OnPriceInvoicedChanged();
				}
			}
		}

		/// <summary>Gets or sets the ProductId field. Mapped on target field 'ProductID'. </summary>
		public System.Guid ProductId
		{
			get	{ return _productId; }
			set
			{
				if((_productId != value))
				{
					if(_product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductIdChanging(value);
					SendPropertyChanging("ProductId");
					_productId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Quantity field. Mapped on target field 'Quantity'. </summary>
		public System.Int32 Quantity
		{
			get	{ return _quantity; }
			set
			{
				if((_quantity != value))
				{
					OnQuantityChanging(value);
					SendPropertyChanging("Quantity");
					_quantity = value;
					SendPropertyChanged("Quantity");
					OnQuantityChanged();
				}
			}
		}

		/// <summary>Gets or sets the TestRunId field. Mapped on target field 'TestRunID'. </summary>
		public System.Guid TestRunId
		{
			get	{ return _testRunId; }
			set
			{
				if((_testRunId != value))
				{
					OnTestRunIdChanging(value);
					SendPropertyChanging("TestRunId");
					_testRunId = value;
					SendPropertyChanged("TestRunId");
					OnTestRunIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'OrderRow.Order - Order.OrderRows (m:1)'</summary>
		public Order Order
		{
			get { return _order.Entity; }
			set
			{
				Order previousValue = _order.Entity;
				if((previousValue != value) || (_order.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Order");
					if(previousValue != null)
					{
						_order.Entity = null;
						previousValue.OrderRows.Remove(this);
					}
					_order.Entity = value;
					if(value == null)
					{
						_orderId = default(System.Int32);
					}
					else
					{
						value.OrderRows.Add(this);
						_orderId = value.OrderId;
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'OrderRow.Product - Product.OrderRows (m:1)'</summary>
		public Product Product
		{
			get { return _product.Entity; }
			set
			{
				Product previousValue = _product.Entity;
				if((previousValue != value) || (_product.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Product");
					if(previousValue != null)
					{
						_product.Entity = null;
						previousValue.OrderRows.Remove(this);
					}
					_product.Entity = value;
					if(value == null)
					{
						_productId = default(System.Guid);
					}
					else
					{
						value.OrderRows.Add(this);
						_productId = value.ProductId;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649