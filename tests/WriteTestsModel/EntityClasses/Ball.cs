#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'Ball', mapped on table 'LLBLGenProUnitTest.dbo.Ball'.</summary>
	public partial class Ball : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_diameter;
		private System.Int32	_id;
		private EntitySet <BallColor> _ballColor;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnDiameterChanging(System.Int32 value);
		partial void OnDiameterChanged();
		partial void OnIdChanging(System.Int32 value);
		partial void OnIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Ball"/> class.</summary>
		public Ball()
		{
			_ballColor = new EntitySet<BallColor>(new Action<BallColor>(this.Attach_BallColor), new Action<BallColor>(this.Detach_BallColor) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BallColor(BallColor entity)
		{
			this.SendPropertyChanging("BallColor");
			entity.Ball = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BallColor(BallColor entity)
		{
			this.SendPropertyChanging("BallColor");
			entity.Ball = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the Diameter field. Mapped on target field 'Diameter'. </summary>
		public System.Int32 Diameter
		{
			get	{ return _diameter; }
			set
			{
				if((_diameter != value))
				{
					OnDiameterChanging(value);
					SendPropertyChanging("Diameter");
					_diameter = value;
					SendPropertyChanged("Diameter");
					OnDiameterChanged();
				}
			}
		}

		/// <summary>Gets or sets the Id field. Mapped on target field 'Id'. </summary>
		public System.Int32 Id
		{
			get	{ return _id; }
			set
			{
				if((_id != value))
				{
					OnIdChanging(value);
					SendPropertyChanging("Id");
					_id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'BallColor.Ball - Ball.BallColor (m:1)'</summary>
		public EntitySet<BallColor> BallColor
		{
			get { return this._ballColor; }
			set { this._ballColor.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649