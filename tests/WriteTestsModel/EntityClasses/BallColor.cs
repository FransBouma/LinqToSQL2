#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.2.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace WriteTests.EntityClasses
{
	/// <summary>Class which represents the entity 'BallColor', mapped on table 'LLBLGenProUnitTest.dbo.BallColor'.</summary>
	public partial class BallColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_ballId;
		private System.ConsoleColor	_colorId;
		private System.Int32	_id;
		private EntityRef <Ball> _ball;
		private EntityRef <Color> _color;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBallIdChanging(System.Int32 value);
		partial void OnBallIdChanged();
		partial void OnColorIdChanging(System.ConsoleColor value);
		partial void OnColorIdChanged();
		partial void OnIdChanging(System.Int32 value);
		partial void OnIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="BallColor"/> class.</summary>
		public BallColor()
		{
			_ball = default(EntityRef<Ball>);
			_color = default(EntityRef<Color>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the BallId field. Mapped on target field 'BallId'. </summary>
		public System.Int32 BallId
		{
			get	{ return _ballId; }
			set
			{
				if((_ballId != value))
				{
					if(_ball.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBallIdChanging(value);
					SendPropertyChanging("BallId");
					_ballId = value;
					SendPropertyChanged("BallId");
					OnBallIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ColorId field. Mapped on target field 'ColorId'. </summary>
		public System.ConsoleColor ColorId
		{
			get	{ return _colorId; }
			set
			{
				if((_colorId != value))
				{
					if(_color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnColorIdChanging(value);
					SendPropertyChanging("ColorId");
					_colorId = value;
					SendPropertyChanged("ColorId");
					OnColorIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Id field. Mapped on target field 'Id'. </summary>
		public System.Int32 Id
		{
			get	{ return _id; }
			set
			{
				if((_id != value))
				{
					OnIdChanging(value);
					SendPropertyChanging("Id");
					_id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'BallColor.Ball - Ball.BallColor (m:1)'</summary>
		public Ball Ball
		{
			get { return _ball.Entity; }
			set
			{
				Ball previousValue = _ball.Entity;
				if((previousValue != value) || (_ball.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Ball");
					if(previousValue != null)
					{
						_ball.Entity = null;
						previousValue.BallColor.Remove(this);
					}
					_ball.Entity = value;
					if(value == null)
					{
						_ballId = default(System.Int32);
					}
					else
					{
						value.BallColor.Add(this);
						_ballId = value.Id;
					}
					this.SendPropertyChanged("Ball");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'BallColor.Color - Color.BallColor (m:1)'</summary>
		public Color Color
		{
			get { return _color.Entity; }
			set
			{
				Color previousValue = _color.Entity;
				if((previousValue != value) || (_color.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Color");
					if(previousValue != null)
					{
						_color.Entity = null;
						previousValue.BallColor.Remove(this);
					}
					_color.Entity = value;
					if(value == null)
					{
						_colorId = default(System.ConsoleColor);
					}
					else
					{
						value.BallColor.Add(this);
						_colorId = value.Id;
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649